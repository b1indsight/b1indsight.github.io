<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on b1indsight</title>
    <link>https://b1indsight.github.io/tags/python/</link>
    <description>b1indsight (Python)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 20 Sep 2020 17:05:31 +0800</lastBuildDate>
    
    <atom:link href="https://b1indsight.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Q&#39;s magic</title>
      <link>https://b1indsight.github.io/post/q_magic/</link>
      <pubDate>Sun, 20 Sep 2020 17:05:31 +0800</pubDate>
      
      <guid>https://b1indsight.github.io/post/q_magic/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Q 是一个开源库，正如它介绍里所写的那样，它是用来“Quick and dirty debugging output for tired programmers.”，Q的用法主要有两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;import q&lt;/code&gt;之后， 使用&lt;code&gt;q(value)&lt;/code&gt;来 print value 的值，或是使用&lt;code&gt;q/value&lt;/code&gt;， 或者&lt;code&gt;q|value&lt;/code&gt;，只要在想 print 的值前加“q/”或“q|”的前缀，即可以print值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在函数定义前加&lt;code&gt;@q&lt;/code&gt;的修饰器,可以print 函数参数，返回值，运行时间等信息
本文用来展示q这个库是如何在300+行代码的篇幅下，完成这样的功能的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;import-q之后为什么可以直接使用q和q&#34;&gt;&lt;code&gt;import q&lt;/code&gt;之后为什么可以直接使用q()和@q&lt;/h2&gt;
&lt;p&gt;想做到这件事的办法可以想到，如同其他语言一样&lt;code&gt;q()&lt;/code&gt;需要被实现成一个全局的静态函数，在python中，则是在import时完成class q的实例化，那么另一个问题是，q 中 class 名是 Q ，那么调用应该是&lt;code&gt;Q.q()&lt;/code&gt;，而不是q()，这部分的实现关键在于它将自己装载在了&lt;code&gt;sys.module&lt;/code&gt;中,通过这条语句&lt;code&gt;sys.modules[&#39;q&#39;] = Q()&lt;/code&gt;并在class中实现&lt;code&gt;__call__()&lt;/code&gt;函数，使得可以直接使用q()&lt;/p&gt;
&lt;h2 id=&#34;qvalue如何实现&#34;&gt;&lt;code&gt;q/value&lt;/code&gt;如何实现&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;q/value&lt;/code&gt; 修改一下格式就变为 &lt;code&gt;q / value&lt;/code&gt;， 同时源码里也可以看到其中有&lt;code&gt;__truediv__()&lt;/code&gt;函数，于是发现这里的实现在于 q 重载了&lt;code&gt;/&lt;/code&gt;和&lt;code&gt;|&lt;/code&gt;运算，使得这个运算符在执行了q print的操作之后返回&lt;code&gt;__truediv__()&lt;/code&gt;的第二个参数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;object.&lt;strong&gt;truediv&lt;/strong&gt;(self, other)
调用这些方法来实现二进制算术运算 (+, -, *, @, /, //, %, divmod(), pow(), **, &amp;laquo;, &amp;raquo;, &amp;amp;, ^, |)。例如，求表达式 x + y 的值，其中 x 是具有 &lt;strong&gt;add&lt;/strong&gt;() 方法的类的一个实例，则会调用 x.&lt;strong&gt;add&lt;/strong&gt;(y)。
&lt;a href=&#34;https://docs.python.org/zh-cn/3/reference/datamodel.html?highlight=truediv#object.__truediv__&#34;&gt;python数据模型&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里可以看到 q/value 时会调用 q 的&lt;code&gt;__truediv__()&lt;/code&gt;函数，这样在 q 重载了这个函数的时候，达到了重载操作符的效果。&lt;/p&gt;
&lt;h2 id=&#34;q如何实现&#34;&gt;&lt;code&gt;@q&lt;/code&gt;如何实现&lt;/h2&gt;
&lt;p&gt;q被调用时调用了&lt;code&gt;__call__()&lt;/code&gt;函数，这个函数主要做了有关的几件事：&lt;code&gt;self.inspect.getframeinfo(self.sys._getframe(1), context=9)&lt;/code&gt;通过&lt;code&gt;getframeinfo()&lt;/code&gt;来获取调用附近的代码文本块，打印被修饰函数的基本信息，然后扫描文本块返回&lt;code&gt;self.trace()&lt;/code&gt;, python 定义修饰器需要返回一个以修饰函数 func 为参数的 wapper 函数，那么可以想到 trace 里会返回 wapper，那么在这里，则是返回了&lt;code&gt;self.functools.update_wrapper(wrapper, func)&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)
更新一个 wrapper 函数以使其类似于 wrapped 函数。 可选参数为指明原函数的哪些属性要直接被赋值给 wrapper 函数的匹配属性的元组，并且这些 wrapper 函数的属性将使用原函数的对应属性来更新。
此函数的主要目的是在 decorator 函数中用来包装被装饰的函数并返回包装器。 如果包装器函数未被更新，则被返回函数的元数据将反映包装器定义而不是原始函数定义，这通常没有什么用处。
&lt;a href=&#34;https://docs.python.org/zh-cn/3/library/functools.html?highlight=functools#module-functools&#34;&gt;module-functools&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;trace 里仅仅是定义了&lt;code&gt;wapper()&lt;/code&gt;,而在&lt;code&gt;wapper()&lt;/code&gt;中执行了 func，然后返回了 func 的返回值，在这里修饰器得到了 func 的参数，(&lt;code&gt;q.__call__(self, *args)&lt;/code&gt;,这里被作为修饰器调用时，args[0] 是被修饰的函数，这个参数被传到了 trace 里)因此可以遍历参数并 print 它们的值，func 在wapper 中执行，这样也可以 print 返回值&lt;/p&gt;
&lt;p&gt;在处理error时会有些麻烦，因为 func 是在 q 的&lt;code&gt;wapper()&lt;/code&gt;中运行的，异常抛出时会抛到 wapper 的 栈帧，这里需要在 wapper 中获取 error 信息，这是通过 &lt;code&gt;self.sys.exc_info()&lt;/code&gt;来做到的，通过 print error_trace_back.tb_next 可以正确显示异常。&lt;/p&gt;
&lt;h3 id=&#34;reference&#34;&gt;reference&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zestyping/q&#34;&gt;https://github.com/zestyping/q&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pyvideo.org/video/1858/sunday-evening-lightning-talks#t=25m15s&#34;&gt;http://pyvideo.org/video/1858/sunday-evening-lightning-talks#t=25m15s&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Flask 源码阅读（1） : request的处理流程</title>
      <link>https://b1indsight.github.io/post/read_flask_source_code_1/</link>
      <pubDate>Sun, 02 Aug 2020 21:11:42 +0800</pubDate>
      
      <guid>https://b1indsight.github.io/post/read_flask_source_code_1/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;本系列试图从flask 1.0版开始阅读一个完整的项目，不同于常见的追踪启动后行为来阅读源码的方式，这一个系列的文章打算从写一个符合wsgi方式的web框架开始，然后逐步完善添加功能的方式来写阅读笔记。&lt;/p&gt;
&lt;h2 id=&#34;wsgi规范&#34;&gt;wsgi规范&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;(environ, start_response):
    start_response(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;, [(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;)])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello world!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一个简单的 wsgi 规范的 app 会被构建为以上的形式。其中app作为即将扩展的部分，需要被实现为一个 Callable 对象，它接受 environ 和 start_response 两个参数，并返回一个字节序列。&lt;/p&gt;
&lt;h2 id=&#34;flask-的app实现&#34;&gt;flask 的app实现&lt;/h2&gt;
&lt;p&gt;以上提到 app 需要被实现为一个 callable 对象，那么，作为主体的 Flask 类则要定义 &lt;code&gt;__call__()&lt;/code&gt; 函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __call__(self, environ, start_response):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;wsgi_app(environ, start_response)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到&lt;code&gt;__call__&lt;/code&gt; 函数其实只是返回了&lt;code&gt;wsgi_app(environ, start_response)&lt;/code&gt;， 真正的app主体在 wsgi_app上，&lt;code&gt;__call__()&lt;/code&gt; 只是它的一个包装。通过这种方式可以分离 app 方法，便于对 app 进行修改。&lt;/p&gt;
&lt;p&gt;观察&lt;code&gt;wsgi_app()&lt;/code&gt; 方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wsgi_app&lt;/span&gt;(self, environ, start_response):
        ctx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;request_context(environ)
        error &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
                ctx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push()
                response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;full_dispatch_request()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
                error &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; e
                response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;handle_exception(e)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
                error &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exc_info()[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
                &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; response(environ, start_response)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;should_ignore_error(error):
                error &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
            ctx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;auto_pop(error)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;方法主体十分简单，首先根据 environ 构造 context ， 然后通过 &lt;code&gt;full_dispatch_request()&lt;/code&gt; 解析请求返回函数
&lt;code&gt;response&lt;/code&gt; ，&lt;code&gt;response(environ, start_response)&lt;/code&gt; 函数返回真正需要获得的字节序列。&lt;/p&gt;
&lt;h3 id=&#34;request_context-函数&#34;&gt;&lt;code&gt;request_context()&lt;/code&gt; 函数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request_context&lt;/span&gt;(self, environ):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; RequestContext(self, environ)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;返回了 RequestContext 类， 暂且跳过。&lt;/p&gt;
&lt;h3 id=&#34;full_dispatch_request-函数&#34;&gt;&lt;code&gt;full_dispatch_request()&lt;/code&gt; 函数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;full_dispatch_request&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;try_trigger_before_first_request_functions()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            request_started&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(self)
            rv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;preprocess_request()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; rv &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                rv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dispatch_request()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
            rv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;handle_user_exception(e)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;finalize_request(rv)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如上所说，&lt;code&gt;full_dispatch_request()&lt;/code&gt; 函数作为主体主要执行了以下几件事&lt;/p&gt;
&lt;p&gt;&lt;code&gt;try_trigger_before_first_request_functions()&lt;/code&gt; : 这个函数并不复杂，简单来说是在第一个 request 之前初始化并依次执行&lt;code&gt;self.before_first_request_funcs&lt;/code&gt;中的函数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;request_started.send(self)&lt;/code&gt; : 这一部分&lt;code&gt;request_started&lt;/code&gt;作为&lt;code&gt;_FakeSingnal&lt;/code&gt;对象用来发送 request start的信号&lt;/p&gt;
&lt;p&gt;&lt;code&gt;preprocess_request()&lt;/code&gt; : 预处理请求，先由上下文栈弹出蓝图，调用&lt;code&gt;url_value_preprocessors.get(none， ())&lt;/code&gt;来获取针对所有 url 值需要的函数，如果有针对所有 url 都起作用的视图函数，则在此调用。接下来调用每一个使用&lt;code&gt;before_request&lt;/code&gt;装饰的可作用于所有 request 的函数。如果其中某一个函数返回一个值，这个值将会作为视图返回值 处理并停止进一步的请求处理。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dispatch_request()&lt;/code&gt; ：本函数进行url匹配，返回视图函数返回值。由栈顶弹出 request，然后&lt;code&gt;rule = req.url_rul&lt;/code&gt;，如果 rule 含有 provide_automatic_options，自动调用&lt;code&gt;self.make_default_options_response()&lt;/code&gt;函数并返回。否则返回&lt;code&gt;self.view_functions[rule.endpoint] (**req.view_args)&lt;/code&gt;，可以看出这里仅通过endpoint来匹配 view function 字典。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;finalize_request()&lt;/code&gt; : 这个函数将先调用&lt;code&gt;make_response(rv)&lt;/code&gt;视图返回值转变为真正的 response (这一部分之后再谈)。接下来是函数主要部分，&lt;code&gt;process_response(response)&lt;/code&gt;函数获取上下文，获得蓝图和上下文中 request 之后需要调用的函数，接下来构造执行链 ctx.after_request_functions-&amp;gt;（逆置）bp.after_request_functions-&amp;gt;适用于所有的 request 的 （逆置） after_request_functions。按照执行链依次执行，最终储存session，结束request。&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;小结&lt;/h2&gt;
&lt;p&gt;本文作为 flask 源码阅读的第一篇，简略的浏览了一遍 app 中关于 request 的处理流程，设计方式基本十分直观，主体分为三部分，在 request 之前，request 处理， request 之后构建了相关的执行链，并进行调用。 接下来一篇将试图观察视图函数的注册以及 route 部分的实现。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>从零开始的python解释器（1）</title>
      <link>https://b1indsight.github.io/post/from_zero_to_a_python_interpreter_1/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://b1indsight.github.io/post/from_zero_to_a_python_interpreter_1/</guid>
      <description>&lt;h2 id=&#34;单条字节码的解释运行&#34;&gt;单条字节码的解释运行&lt;/h2&gt;
&lt;h3 id=&#34;反编译字节码&#34;&gt;反编译字节码&lt;/h3&gt;
&lt;p&gt;python 字节码形式可以用&lt;code&gt;dis.dis()&lt;/code&gt;来反编译code object来获得，先考虑一段简单的python代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;反编译之后是：
&lt;img src=&#34;https://firebasestorage.googleapis.com/v0/b/firescript-577a2.appspot.com/o/imgs%2Fapp%2Fb1indsight%2FQSbuQtX8Ay.png?alt=media&amp;amp;token=e2261049-5c88-4308-99ea-70f6fc57dd76&#34; alt=&#34;dis.dis(code)&#34;&gt;&lt;/p&gt;
&lt;p&gt;可见字节码拥有2Byte长度，前半部分用来标识字节码，后半是参数。其中字节码的参数仅用来标识字节码参数的位置，而不是参数本身。&lt;/p&gt;
&lt;h3 id=&#34;字节码来源&#34;&gt;字节码来源&lt;/h3&gt;
&lt;p&gt;code object是由&lt;code&gt;compile()&lt;/code&gt;函数编译代码字符串生成的。在当前要进行的部分暂时关注它的一部分内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;co_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Z&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\x17\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Z&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;co_consts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, None)
code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;co_names &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上则是解释运行暂时需要的全部材料，其中co_code则是python字节码，co_consts用来存储需要的常数，co_names存储需要的变量。&lt;/p&gt;
&lt;p&gt;举例：LOAD_CONST的解释
&lt;code&gt;print(co_code[0])&lt;/code&gt;则会返回100，即是字节码， &lt;code&gt;co_code[1]= 0&lt;/code&gt;则是字节码参数
通过&lt;code&gt;dis.opname[100]&lt;/code&gt;则可知道字节码&lt;code&gt;opname = LOAD_CONST&lt;/code&gt;,参数则是&lt;code&gt;co_consts[0] = 1&lt;/code&gt;。这样第一条字节码就可以翻译为&lt;code&gt;LOAD_CONST(1)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;字节码执行&#34;&gt;字节码执行&lt;/h3&gt;
&lt;p&gt;由上知道了字节码本身被翻译为&lt;code&gt;LOAD_CONST(1)&lt;/code&gt;，接下来就需要执行该函数
python vm与JVM相同，都是基于操作数栈的解释器，函数在执行后将返回值压入操作数栈
因此，&lt;code&gt;LOAD_CONST()&lt;/code&gt;函数可以被写成以下形式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LOAD_CONST&lt;/span&gt;(num):
stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push(num)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样，第一条字节码便执行完成&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;多条字节码顺序执行&#34;&gt;多条字节码顺序执行&lt;/h2&gt;
&lt;p&gt;这样可以写出字节码解释器主体的循环：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;pc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
        byteName, arguments &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prase_byte_code_and_argument()
        dispatch(byteName, arguments)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; byteName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RETURE_VALUE&amp;#34;&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此处，鉴于将来要对于循环和分支结构的支持，考虑通过判断&lt;code&gt;RETURE_VALUE&lt;/code&gt;来返回退出循环。&lt;/p&gt;
&lt;h3 id=&#34;prase_byte_code_and_argument函数&#34;&gt;&lt;code&gt;prase_byte_code_and_argument()&lt;/code&gt;函数&lt;/h3&gt;
&lt;p&gt;本函数用来解析code.co_code的字节码，转换为字节码函数名和参数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-pythonpython&#34; data-lang=&#34;pythonpython&#34;&gt;def prase_byte_code_and_argument():
    byteCode = code.co_code[pc]
    byteName = dis.opname[byteCode]
    arguments = []
    pc += 2

    if byteCode &amp;gt;= dis.HAVE_ARGUMENT:
        arg = code.co_code[pc-1]

        if byteCode in dis.hasconst:   # Look up a constant
            arg = code.co_consts[arg]
        elif byteCode in dis.hasname:  # Look up a name
            arg = code.co_names[arg]
        elif byteCode in dis.haslocal:  # Look up a local name
            arg = code.co_varnames[arg]
        elif byteCode in dis.hasjrel:  # Calculate a relative jump
            arg = pc + arg
        else:
            arg = arg
        arguments = [arg]
    else:
        arguments = []

return byteName, arguments
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;dispatchbytename-arguments函数&#34;&gt;&lt;code&gt;dispatch(byteName, arguments)&lt;/code&gt;函数&lt;/h3&gt;
&lt;p&gt;获取到&lt;code&gt;byteName&lt;/code&gt;之后要得到对应的函数对象，此时使用&lt;code&gt;getattr(byteName)&lt;/code&gt;来获取对应的函数对象
然后调用&lt;code&gt;byteName(*arguments)&lt;/code&gt;完成执行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dispatch&lt;/span&gt;(byteName, arguments):
    func &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getattr(vm, byteName)
    func(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;arguments)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reture_value&#34;&gt;RETURE_VALUE&lt;/h3&gt;
&lt;p&gt;return value暂时仅作为字节码的终止，因此判断运行到此处时退出主循环。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;最简单的字节码求值器的主题就这样写成了，剩余的其他工作即是填充上未写过的字节码函数定义，这样字节码的解释求值即可以完成了。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>