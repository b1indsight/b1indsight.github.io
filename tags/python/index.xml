<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on b1indsight</title>
    <link>https://b1indsight.github.io/tags/python/</link>
    <description>Recent content in Python on b1indsight</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 02 Mar 2022 22:03:50 +0800</lastBuildDate>
    <atom:link href="https://b1indsight.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Super函数和mro算法</title>
      <link>https://b1indsight.github.io/posts/super_and_mro_algorithm/</link>
      <pubDate>Wed, 02 Mar 2022 22:03:50 +0800</pubDate>
      <guid>https://b1indsight.github.io/posts/super_and_mro_algorithm/</guid>
      <description>super()作为在python中常被使用到的一个方法而言，具有一些有趣的特性，本文可以看作super()的一个考古，主要包括以下几个部分：</description>
    </item>
    <item>
      <title>Q&#39;s magic</title>
      <link>https://b1indsight.github.io/posts/q_magic/</link>
      <pubDate>Sun, 20 Sep 2020 17:05:31 +0800</pubDate>
      <guid>https://b1indsight.github.io/posts/q_magic/</guid>
      <description>前言 # Q 是一个开源库，正如它介绍里所写的那样，它是用来“Quick and dirty debugging output for tired programmers.”，Q的用法主要有两种： import q之后， 使用</description>
    </item>
    <item>
      <title>Flask 源码阅读（1） : request的处理流程</title>
      <link>https://b1indsight.github.io/posts/read_flask_source_code_1/</link>
      <pubDate>Sun, 02 Aug 2020 21:11:42 +0800</pubDate>
      <guid>https://b1indsight.github.io/posts/read_flask_source_code_1/</guid>
      <description>前言 # 本系列试图从flask 1.0版开始阅读一个完整的项目，不同于常见的追踪启动后行为来阅读源码的方式，这一个系列的文章打算从写一个符合ws</description>
    </item>
    <item>
      <title>从零开始的python解释器（1）</title>
      <link>https://b1indsight.github.io/posts/from_zero_to_a_python_interpreter_1/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://b1indsight.github.io/posts/from_zero_to_a_python_interpreter_1/</guid>
      <description>单条字节码的解释运行 # 反编译字节码 # python 字节码形式可以用dis.dis()来反编译code object来获得，先考虑一段简单的python代码</description>
    </item>
  </channel>
</rss>
