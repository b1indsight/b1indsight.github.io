<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>b1indsight</title>
    <link>https://b1indsight.github.io/</link>
    <description>b1indsight</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 06 Sep 2020 20:46:36 +0800</lastBuildDate>
    
    <atom:link href="https://b1indsight.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2020.08.31-2020.09.06</title>
      <link>https://b1indsight.github.io/post/weekly_report_20200831_20200906/</link>
      <pubDate>Sun, 06 Sep 2020 20:46:36 +0800</pubDate>
      
      <guid>https://b1indsight.github.io/post/weekly_report_20200831_20200906/</guid>
      <description>&lt;h3 id=&#34;20200831---20200906&#34;&gt;2020.08.31 - 2020.09.06&lt;/h3&gt;
&lt;h2 id=&#34;上周总结&#34;&gt;上周总结&lt;/h2&gt;
&lt;p&gt;上周计划的三件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ts ts入门写了hello，world，依然没有找到什么项目可以做，考虑写一下vscode的扩展，或者在github上找一个吧。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重写虚拟机的任务根本没动，这周其实什么也没有干。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A Philosophy of software design， 书读了半章，进度缓慢。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上周游戏时间13小时，基本不算高的。大量的休息时间主要用来做饭和做些杂事了，上周买了新的人体工学椅和键盘。阿米洛的静电容轴响应力度足够小，回弹也快速，而且基本上没有误触，大键的手感没有小键好，樱花粉轴整体上还是比较满意的。人体工学椅买了金卓b，不过到现在还没有找到比较好的坐法，感觉100度的椅角度比较好，但是并没有这一档，不固定椅背可能能达到效果，但是不知道这种方法有没有什么坏处。&lt;/p&gt;
&lt;h2 id=&#34;下周&#34;&gt;下周&lt;/h2&gt;
&lt;p&gt;下周继续三件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重写虚拟机， 这件事作为这个项目的第一阶段目标，还是应该要做完的，至于之后继续的发展，要看我以后会不会有继续这个方向的学习计划。&lt;/li&gt;
&lt;li&gt;A Philosophy of software design， 现在是读到5.5，至少这周要读完11章。&lt;/li&gt;
&lt;li&gt;Ts， 对于前端能做到什么程度我还没有清晰的概念，先github逛一下吧。找个项目，目标大概到提出一个pr。（可能完不成&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;观点&#34;&gt;观点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;相对于notion这样以主题为核心来记录笔记的方法十分适合读书或者其他的笔记整理，而roam research这样的自下而上的笔记方法在记录自己偶发的想法的时候会更加方便，使用链接和tag会更好的整理想法，建立一个单独的页面可以用来存放和分类，在这个角度来看，roam research更加适合与个人的笔记系统。&lt;/li&gt;
&lt;li&gt;一个简单的获取信息的筛选系统：1.以输出知识为卖点的账号，如果达到日更新，那么即可以说这些账号的输出都是垃圾（除非是多人合作的方法，而其中每个作者输出频率不高于一周一篇）。2.新闻及其他资讯应该在周的尺度上观看，如果你不是依靠短暂的市场信息来获利的话，任何的日为单位的咨询对你来说都是可有可无占用时间的垃圾，这些东西除了谈资之外毫无作用，反而会带来获取到什么的错觉。（一个参考观点：对最近事件即时性的解释基本都是错误的，无法用来预测任何事）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;杂谈&#34;&gt;杂谈&lt;/h2&gt;
&lt;p&gt;上周提到自己测试的时候经常被block，最终发现其实是user agent的问题，可能是一直沿用的user agent版本太低，更新之后基本就不出现这样的问题了。公司的爬虫脚本居然是要一个个部署到集群上的，而不是靠一个控制系统调用，个人感觉十分原始。而其他的java数据处理程序居然也是类似效果，靠bat文件+参数分别启动，可能有热替换的好处，但是java热更新应该是可用的解决方案，总之感觉比较原始。&lt;/p&gt;
&lt;p&gt;人体工学椅感觉很难靠自重把椅背压下去，导致整个椅子在感觉上存在感很强，感觉不是什么好事，可能要继续调整下，这把椅子头枕位置需要多2厘米才能支撑到脖子，是特别的败笔。&lt;/p&gt;
&lt;p&gt;用在食物上的花费没有想象中高，大概估计一月花1500左右，感觉一个月至少需要填入500左右的花费更好一点，发了工资去买煎锅和牛排吧。&lt;/p&gt;
&lt;p&gt;本周基本没读什么，导致blog也写不出来什么内容，下周打算在这周的栏目上添加一些，周总结大概长度达到2000字可能会比较好。&lt;/p&gt;
&lt;p&gt;END&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2020.08.24-2020.08.30</title>
      <link>https://b1indsight.github.io/post/weekly_report/</link>
      <pubDate>Sun, 30 Aug 2020 22:42:50 +0800</pubDate>
      
      <guid>https://b1indsight.github.io/post/weekly_report/</guid>
      <description>&lt;h3 id=&#34;20200824-20200830&#34;&gt;2020.08.24-2020.08.30&lt;/h3&gt;
&lt;h2 id=&#34;新工作&#34;&gt;新工作&lt;/h2&gt;
&lt;p&gt;这个月在经过了短暂的找工作时间之后，光速接了新的offer，拿到了钱并没有多少，但是工作压力并不大的新工作，结束了我在今年的半年neet生活。neet其实并没有那么令人厌恶，让人痛苦的是在家里深受限制，由于没有工作，不能看更多在长远有好处又感兴趣的书，只能一遍一遍刷翻过的面试博客，网络上的面试文章有很多错误之处，但同时一些错误的说法才是可以通过面试的答案，看着十分痛苦，另外这些没什么联系又内容十分多的东西，即使被称为知识也十分可疑。刷题反而成了我为数不多的逃避时间。&lt;/p&gt;
&lt;p&gt;但是新公司面试十分简单和原始，一时间在我准备了挺久的python面试的情况下有点措不及防，关于html的几个问题我一概不知，在写html的时候我基本上是没有文档无法独立完成工作，没想到在这方面还有要求。&lt;/p&gt;
&lt;p&gt;本以为是作为写python被招进来的，没想到主要工作是维护php的网站和写爬虫，公司的爬虫使用的语言挺多，方法反而感觉原始，即使是Java项目，也是基本上脚本模式存在，依靠一个php程序调用.在文件里居然有多个脚本复用同样的300+行代码，居然没有抽象成Util工具；主方法长到让人难受，基本上没有什么封装；代码风格十分诡异，一部分继承与其他地方的变量名，导致和语言常用的命名格式有区别，另一部分在于分行基本不存在，一行长达300+字符简直是首次见到，代码块之间基本没有分割，感觉就像拉长的蚯蚓，让人看着十分痛苦。&lt;/p&gt;
&lt;p&gt;这两周做的事情基本是在维护修改继承的Lua爬虫，有技术含量的事基本都被人做过了，http请求全靠curl，用了通用格式的正则方法而不是lua自己的string.match()让人高兴，其他也没有什么有兴趣的事情，由于自己没有生成cookie的脚本，所以在测试时经常被block，看来考虑写一个需要被提上日程。&lt;/p&gt;
&lt;p&gt;ps.公司项目基本没有测试，我十分好奇为什么这样测试代码还没有我项目长的东西可以成功跑这么多年，话说爬虫测试也基本很难做，基本只能做一下格式测试，对内容似乎没有什么好办法。&lt;/p&gt;
&lt;p&gt;pss.Lua语法很让人难受，无内容的迭代器居然是自己返回，既没有抛error也没有任何返回就能退出让人十分恶心&lt;/p&gt;
&lt;h2 id=&#34;搬家&#34;&gt;搬家&lt;/h2&gt;
&lt;p&gt;花了大量的钱用来整租了一套一室户，至少有干净的厕所和厨房令人心情愉快，房东夫妇也看起来很好，成功办了居住证，感觉不久后至少可以拿住房公积金分担点压力，总之本来工资也没多少，这一年能攒一个房租钱就不错了。&lt;/p&gt;
&lt;p&gt;一个人住有挺多好处，自己做饭还是不错的，不过最近做饭时间确实挺长，基本每餐要一个小时，虽然味道不错，但是占用还是挺多。&lt;/p&gt;
&lt;p&gt;超市东西还不错，有盒马的补充基本就可以当地解决，不至于求助于淘宝，最近一周食物差不多要花200+，其中一大半是买肉的钱，摆脱了家里高碳水的生活，现在可以一餐吃至少半斤各种的肉，还是让人愉快。&lt;/p&gt;
&lt;p&gt;发工资之后应该买个铸铁煎锅，可以用来煎牛排了。最近看人牛排视频十分嘴馋，先买些50多一斤的来试试吧。&lt;/p&gt;
&lt;p&gt;一个人的另一个好处是基本可以无限外放，24小时开着电脑了，但是显示器的hdmi线似乎是有什么bug，自动熄屏之后有时不能自动恢复，十分难受，另一个问题是桌子本身挺小，以后可能很难同时拼高达和干别的事，另外全尺寸键盘有点太长，我基本不会利用数字小键盘，想换一个键盘，目前犹豫一下ikbc和大f。&lt;/p&gt;
&lt;p&gt;ps.椅子坐着没有头部支撑有点难受，发工资了买新椅子吧。(下周就买算了)&lt;/p&gt;
&lt;h2 id=&#34;上周总结&#34;&gt;上周总结&lt;/h2&gt;
&lt;p&gt;上周的空闲时间基本上都在睡觉和玩游戏，游戏其实也没多玩，感觉恢复的时间基本上差不多了，每天保证睡眠还是挺重要。&lt;/p&gt;
&lt;p&gt;自己的github也没有维护，是全白，连评论也没回。&lt;/p&gt;
&lt;h2 id=&#34;下周&#34;&gt;下周&lt;/h2&gt;
&lt;p&gt;按惯例，下周主要搞三件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学TS， 我要开始学Ts了，不知道有什么项目可以做，先两天入门试试吧&lt;/li&gt;
&lt;li&gt;重写虚拟机，python虚拟机设计虽然是垃圾，但还是至少自己的先重写，重理一下。先支持基本功能再去看别的实现吧。(感觉接下来一年搞分布式数据库可能是是收益最大的方向，先试着做做看吧)(blog预定，从零开始的python虚拟机第二篇，打算写控制流程和code block)&lt;/li&gt;
&lt;li&gt;读书：A Philosophy of Software Design, 看了一周了，感觉至少要两周看完，先看着呗。(下本书预定：数据库系统内幕)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;杂谈&#34;&gt;杂谈&lt;/h2&gt;
&lt;p&gt;想搞日常直播，但是感觉也很难有人看，不知道能不能搞起来。&lt;/p&gt;
&lt;p&gt;想买面包机，但是现在每周面包花费也就10+，基本不是很划算。&lt;/p&gt;
&lt;p&gt;需要屏幕挂灯和新椅子，买个人体工学椅吧。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;想要女朋友&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;END&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Flask 源码阅读（1） : request的处理流程</title>
      <link>https://b1indsight.github.io/post/read_flask_source_code_1/</link>
      <pubDate>Sun, 02 Aug 2020 21:11:42 +0800</pubDate>
      
      <guid>https://b1indsight.github.io/post/read_flask_source_code_1/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;本系列试图从flask 1.0版开始阅读一个完整的项目，不同于常见的追踪启动后行为来阅读源码的方式，这一个系列的文章打算从写一个符合wsgi方式的web框架开始，然后逐步完善添加功能的方式来写阅读笔记。&lt;/p&gt;
&lt;h2 id=&#34;wsgi规范&#34;&gt;wsgi规范&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;(environ, start_response):
    start_response(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;, [(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;)])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello world!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一个简单的 wsgi 规范的 app 会被构建为以上的形式。其中app作为即将扩展的部分，需要被实现为一个 Callable 对象，它接受 environ 和 start_response 两个参数，并返回一个字节序列。&lt;/p&gt;
&lt;h2 id=&#34;flask-的app实现&#34;&gt;flask 的app实现&lt;/h2&gt;
&lt;p&gt;以上提到 app 需要被实现为一个 callable 对象，那么，作为主体的 Flask 类则要定义 &lt;code&gt;__call__()&lt;/code&gt; 函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __call__(self, environ, start_response):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;wsgi_app(environ, start_response)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到&lt;code&gt;__call__&lt;/code&gt; 函数其实只是返回了&lt;code&gt;wsgi_app(environ, start_response)&lt;/code&gt;， 真正的app主体在 wsgi_app上，&lt;code&gt;__call__()&lt;/code&gt; 只是它的一个包装。通过这种方式可以分离 app 方法，便于对 app 进行修改。&lt;/p&gt;
&lt;p&gt;观察&lt;code&gt;wsgi_app()&lt;/code&gt; 方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wsgi_app&lt;/span&gt;(self, environ, start_response):
        ctx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;request_context(environ)
        error &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
                ctx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push()
                response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;full_dispatch_request()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
                error &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; e
                response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;handle_exception(e)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
                error &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exc_info()[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
                &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; response(environ, start_response)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;should_ignore_error(error):
                error &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
            ctx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;auto_pop(error)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;方法主体十分简单，首先根据 environ 构造 context ， 然后通过 &lt;code&gt;full_dispatch_request()&lt;/code&gt; 解析请求返回函数
&lt;code&gt;response&lt;/code&gt; ，&lt;code&gt;response(environ, start_response)&lt;/code&gt; 函数返回真正需要获得的字节序列。&lt;/p&gt;
&lt;h3 id=&#34;request_context-函数&#34;&gt;&lt;code&gt;request_context()&lt;/code&gt; 函数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request_context&lt;/span&gt;(self, environ):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; RequestContext(self, environ)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;返回了 RequestContext 类， 暂且跳过。&lt;/p&gt;
&lt;h3 id=&#34;full_dispatch_request-函数&#34;&gt;&lt;code&gt;full_dispatch_request()&lt;/code&gt; 函数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;full_dispatch_request&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;try_trigger_before_first_request_functions()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            request_started&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(self)
            rv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;preprocess_request()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; rv &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                rv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dispatch_request()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
            rv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;handle_user_exception(e)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;finalize_request(rv)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如上所说，&lt;code&gt;full_dispatch_request()&lt;/code&gt; 函数作为主体主要执行了以下几件事&lt;/p&gt;
&lt;p&gt;&lt;code&gt;try_trigger_before_first_request_functions()&lt;/code&gt; : 这个函数并不复杂，简单来说是在第一个 request 之前初始化并依次执行&lt;code&gt;self.before_first_request_funcs&lt;/code&gt;中的函数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;request_started.send(self)&lt;/code&gt; : 这一部分&lt;code&gt;request_started&lt;/code&gt;作为&lt;code&gt;_FakeSingnal&lt;/code&gt;对象用来发送 request start的信号&lt;/p&gt;
&lt;p&gt;&lt;code&gt;preprocess_request()&lt;/code&gt; : 预处理请求，先由上下文栈弹出蓝图，调用&lt;code&gt;url_value_preprocessors.get(none， ())&lt;/code&gt;来获取针对所有 url 值需要的函数，如果有针对所有 url 都起作用的视图函数，则在此调用。接下来调用每一个使用&lt;code&gt;before_request&lt;/code&gt;装饰的可作用于所有 request 的函数。如果其中某一个函数返回一个值，这个值将会作为视图返回值 处理并停止进一步的请求处理。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dispatch_request()&lt;/code&gt; ：本函数进行url匹配，返回视图函数返回值。由栈顶弹出 request，然后&lt;code&gt;rule = req.url_rul&lt;/code&gt;，如果 rule 含有 provide_automatic_options，自动调用&lt;code&gt;self.make_default_options_response()&lt;/code&gt;函数并返回。否则返回&lt;code&gt;self.view_functions[rule.endpoint] (**req.view_args)&lt;/code&gt;，可以看出这里仅通过endpoint来匹配 view function 字典。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;finalize_request()&lt;/code&gt; : 这个函数将先调用&lt;code&gt;make_response(rv)&lt;/code&gt;视图返回值转变为真正的 response (这一部分之后再谈)。接下来是函数主要部分，&lt;code&gt;process_response(response)&lt;/code&gt;函数获取上下文，获得蓝图和上下文中 request 之后需要调用的函数，接下来构造执行链 ctx.after_request_functions-&amp;gt;（逆置）bp.after_request_functions-&amp;gt;适用于所有的 request 的 （逆置） after_request_functions。按照执行链依次执行，最终储存session，结束request。&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;小结&lt;/h2&gt;
&lt;p&gt;本文作为 flask 源码阅读的第一篇，简略的浏览了一遍 app 中关于 request 的处理流程，设计方式基本十分直观，主体分为三部分，在 request 之前，request 处理， request 之后构建了相关的执行链，并进行调用。 接下来一篇将试图观察视图函数的注册以及 route 部分的实现。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>从零开始的python解释器（1）</title>
      <link>https://b1indsight.github.io/post/from_zero_to_a_python_interpreter_1/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://b1indsight.github.io/post/from_zero_to_a_python_interpreter_1/</guid>
      <description>&lt;h2 id=&#34;单条字节码的解释运行&#34;&gt;单条字节码的解释运行&lt;/h2&gt;
&lt;h3 id=&#34;反编译字节码&#34;&gt;反编译字节码&lt;/h3&gt;
&lt;p&gt;python 字节码形式可以用&lt;code&gt;dis.dis()&lt;/code&gt;来反编译code object来获得，先考虑一段简单的python代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;反编译之后是：
&lt;img src=&#34;https://firebasestorage.googleapis.com/v0/b/firescript-577a2.appspot.com/o/imgs%2Fapp%2Fb1indsight%2FQSbuQtX8Ay.png?alt=media&amp;amp;token=e2261049-5c88-4308-99ea-70f6fc57dd76&#34; alt=&#34;dis.dis(code)&#34;&gt;&lt;/p&gt;
&lt;p&gt;可见字节码拥有2Byte长度，前半部分用来标识字节码，后半是参数。其中字节码的参数仅用来标识字节码参数的位置，而不是参数本身。&lt;/p&gt;
&lt;h3 id=&#34;字节码来源&#34;&gt;字节码来源&lt;/h3&gt;
&lt;p&gt;code object是由&lt;code&gt;compile()&lt;/code&gt;函数编译代码字符串生成的。在当前要进行的部分暂时关注它的一部分内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;co_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Z&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\x17\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Z&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;co_consts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, None)
code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;co_names &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上则是解释运行暂时需要的全部材料，其中co_code则是python字节码，co_consts用来存储需要的常数，co_names存储需要的变量。&lt;/p&gt;
&lt;p&gt;举例：LOAD_CONST的解释
&lt;code&gt;print(co_code[0])&lt;/code&gt;则会返回100，即是字节码， &lt;code&gt;co_code[1]= 0&lt;/code&gt;则是字节码参数
通过&lt;code&gt;dis.opname[100]&lt;/code&gt;则可知道字节码&lt;code&gt;opname = LOAD_CONST&lt;/code&gt;,参数则是&lt;code&gt;co_consts[0] = 1&lt;/code&gt;。这样第一条字节码就可以翻译为&lt;code&gt;LOAD_CONST(1)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;字节码执行&#34;&gt;字节码执行&lt;/h3&gt;
&lt;p&gt;由上知道了字节码本身被翻译为&lt;code&gt;LOAD_CONST(1)&lt;/code&gt;，接下来就需要执行该函数
python vm与JVM相同，都是基于操作数栈的解释器，函数在执行后将返回值压入操作数栈
因此，&lt;code&gt;LOAD_CONST()&lt;/code&gt;函数可以被写成以下形式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LOAD_CONST&lt;/span&gt;(num):
stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push(num)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样，第一条字节码便执行完成&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;多条字节码顺序执行&#34;&gt;多条字节码顺序执行&lt;/h2&gt;
&lt;p&gt;这样可以写出字节码解释器主体的循环：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;pc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
        byteName, arguments &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prase_byte_code_and_argument()
        dispatch(byteName, arguments)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; byteName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RETURE_VALUE&amp;#34;&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此处，鉴于将来要对于循环和分支结构的支持，考虑通过判断&lt;code&gt;RETURE_VALUE&lt;/code&gt;来返回退出循环。&lt;/p&gt;
&lt;h3 id=&#34;prase_byte_code_and_argument函数&#34;&gt;&lt;code&gt;prase_byte_code_and_argument()&lt;/code&gt;函数&lt;/h3&gt;
&lt;p&gt;本函数用来解析code.co_code的字节码，转换为字节码函数名和参数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-pythonpython&#34; data-lang=&#34;pythonpython&#34;&gt;def prase_byte_code_and_argument():
    byteCode = code.co_code[pc]
    byteName = dis.opname[byteCode]
    arguments = []
    pc += 2

    if byteCode &amp;gt;= dis.HAVE_ARGUMENT:
        arg = code.co_code[pc-1]

        if byteCode in dis.hasconst:   # Look up a constant
            arg = code.co_consts[arg]
        elif byteCode in dis.hasname:  # Look up a name
            arg = code.co_names[arg]
        elif byteCode in dis.haslocal:  # Look up a local name
            arg = code.co_varnames[arg]
        elif byteCode in dis.hasjrel:  # Calculate a relative jump
            arg = pc + arg
        else:
            arg = arg
        arguments = [arg]
    else:
        arguments = []

return byteName, arguments
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;dispatchbytename-arguments函数&#34;&gt;&lt;code&gt;dispatch(byteName, arguments)&lt;/code&gt;函数&lt;/h3&gt;
&lt;p&gt;获取到&lt;code&gt;byteName&lt;/code&gt;之后要得到对应的函数对象，此时使用&lt;code&gt;getattr(byteName)&lt;/code&gt;来获取对应的函数对象
然后调用&lt;code&gt;byteName(*arguments)&lt;/code&gt;完成执行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dispatch&lt;/span&gt;(byteName, arguments):
    func &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getattr(vm, byteName)
    func(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;arguments)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reture_value&#34;&gt;RETURE_VALUE&lt;/h3&gt;
&lt;p&gt;return value暂时仅作为字节码的终止，因此判断运行到此处时退出主循环。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;最简单的字节码求值器的主题就这样写成了，剩余的其他工作即是填充上未写过的字节码函数定义，这样字节码的解释求值即可以完成了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JUC包AQS设计</title>
      <link>https://b1indsight.github.io/post/juc_aqs/</link>
      <pubDate>Fri, 01 May 2020 16:27:50 +0800</pubDate>
      
      <guid>https://b1indsight.github.io/post/juc_aqs/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;为什么需要AQS
&lt;ul&gt;
&lt;li&gt;JUC包中提供了一系列的同步器，这些同步器都有以下基本功能
&lt;ul&gt;
&lt;li&gt;内部同步状态的管理&lt;/li&gt;
&lt;li&gt;内部同步状态的设置
&lt;ul&gt;
&lt;li&gt;使一个线程被阻塞&lt;/li&gt;
&lt;li&gt;使线程被其他线程唤醒&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;几乎任何一个同步器都可以用来设计其他的同步器，因此将共有部分抽象并设计框架成为一个符合直觉的需求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AQS设计需求
&lt;ul&gt;
&lt;li&gt;功能目标
&lt;ul&gt;
&lt;li&gt;基本方法，Acquire和Release&lt;/li&gt;
&lt;li&gt;阻塞和非阻塞操作&lt;/li&gt;
&lt;li&gt;可选的超时设置&lt;/li&gt;
&lt;li&gt;通过中断实现的任务取消，通常是分为两个版本，一个 acquire 可取消，而另一个不可以&lt;/li&gt;
&lt;li&gt;独占与非独占模式&lt;/li&gt;
&lt;li&gt;监控形式的await/signal 操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能目标
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://firebasestorage.googleapis.com/v0/b/firescript-577a2.appspot.com/o/imgs%2Fapp%2Fb1indsight%2FGClYdJQyqH?alt=media&amp;amp;token=94fddedf-4b05-4a05-8509-14aa630410f4&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AQS结构
&lt;ul&gt;
&lt;li&gt;acquire和release
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code class=&#34;language-acquire:&#34; data-lang=&#34;acquire:&#34;&gt;  while (synchronization state does not allow acquire) {
      enqueue current thread if not already queued;
      possibly block current thread;
  }
  dequeue current thread if it was queued;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code class=&#34;language-release:&#34; data-lang=&#34;release:&#34;&gt;  update synchronization state;
  if (state may permit a blocked thread to acquire)
      unblock one or more queued threads;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同步状态的原子性管理
&lt;ul&gt;
&lt;li&gt;AQS使用了一个32位int保存state，并提供&lt;code&gt;getState&lt;/code&gt;, &lt;code&gt;setState&lt;/code&gt;, 和&lt;code&gt;compareAndSet&lt;/code&gt;来读取和操作&lt;/li&gt;
&lt;li&gt;在CyclingBarrier中使用了64位state， 因此利用了锁来完成原子性操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线程的阻塞与解除阻塞
&lt;ul&gt;
&lt;li&gt;通过JUCLockSupport park和unpark来控制阻塞和feizuse&lt;/li&gt;
&lt;li&gt;park是基于线程设置的，而不是基于同步器&lt;/li&gt;
&lt;li&gt;unpark是没有计数的，因此可能有多余的unpark附在线程上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;队列的管理
&lt;ul&gt;
&lt;li&gt;阻塞队列采用严格的FIFO链表队列，使用了变体的CLH锁。
&lt;ul&gt;
&lt;li&gt;为解决取消和超时功能，待选MCS锁变体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://firebasestorage.googleapis.com/v0/b/firescript-577a2.appspot.com/o/imgs%2Fapp%2Fb1indsight%2FJyxNDXHojl?alt=media&amp;amp;token=735980c0-8bc6-4c36-8d67-ecfd7992de20&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;节点通过自旋和CAS操作插入，每个节点状态被保存在它的前驱，因此自旋阻塞类似&lt;code&gt;while(node.pred.state != release);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;CLH锁的优点在于节点的入队与出队总是快速， 无障碍且无锁的，而且由于每个节点的状态保持在前驱，使得修改节点可以分散进行；&lt;/li&gt;
&lt;li&gt;一个节点的前驱修改其状态，他的后继在下一次自旋时即会发现状态的改变，在阻塞队列中，则需要前驱节点去显式的唤醒（即unpark。
&lt;ul&gt;
&lt;li&gt;其中节点的next的仅为一种优化，这个队列是由prev所链接的，由于缺少应用于双向列表的CAS操作，next仅仅是直接赋值的。因此在唤醒时使用next来找到需要唤醒的节点，next不存在也并不能证明后继不存在，需要由tail前溯来确认。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;节点在前驱中的状态是用于控制阻塞而不是自旋，在同步器中，线程仅在&lt;code&gt;tryAcquire&lt;/code&gt;返回&lt;code&gt;true&lt;/code&gt;时才在&lt;code&gt;acquire&lt;/code&gt;返回。&lt;/li&gt;
&lt;li&gt;活动线程在队首时，仅允许&lt;code&gt;tryAcquire&lt;/code&gt;来获取锁，也可能&lt;code&gt;Acquire&lt;/code&gt;失败而重新堵塞，此时是通过检查前驱是否为head来确认解除许可。取消状态也必须在状态位实现，因此单bit的release位并不够。&lt;/li&gt;
&lt;li&gt;设置状态同时可以避免多余的park和unpark，在线程park前，设置signal位并检查同步状态和节点状态。线程release时重置状态，这样显性的标识状态可以避免多次阻塞及引入多次冲突的开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Acquire操作
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;  if (!tryAcquire(arg)) {
      node = create and enqueue new node;
      pred = node&#39;s effective predecessor;
  while (pred is not head node || !tryAcquire(arg)) {
      if (pred&#39;s signal bit is set)
          park();
      else
          compareAndSet pred&#39;s signal bit to true;
      pred = node&#39;s effective predecessor;
  }
  head = node;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;release
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;  if (tryRelease(arg) &amp;amp;&amp;amp; head node&#39;s signal bit is set) {
      compareAndSet head&#39;s signal bit to false;
      unpark head&#39;s successor, if one exists
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;条件队列
&lt;ul&gt;
&lt;li&gt;#TODO&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AQS使用
&lt;ul&gt;
&lt;li&gt;AQS作为模板提供给子类，子类仅需要设置更新状态。在JUC包中的同步器使用了一个内部类来包装AQS，重写了tryAquire和tryRelease来控制同步。&lt;/li&gt;
&lt;li&gt;AQS提供了多个版本的Aquire和Release，包括超时和中断版本。并提供了tryAcquireShared来控制可重入的资源，方法通过返回值通知框架所剩资源状况，在release时框架通过级联来唤醒多个节点。&lt;/li&gt;
&lt;li&gt;公平与非公平功能：
&lt;ul&gt;
&lt;li&gt;在一些条件下，非公平的获取锁可以有效提高同步器吞吐量，而如果外来线程可以持续抢占锁则会造成队列中线程饥饿。&lt;/li&gt;
&lt;li&gt;FIFO队列在进入之前线程会调用tryAcquire方法，因此获得了一个与队头线程竞争的机会，从而可以实现公平与非公平的竞争，此时可以修改tryAcquire中对资源的请求次数来使其偏向外来线程；如果要实现严格的公平竞争，则可以通过添加约束，使线程只有入队才能调用tryAcquire。
&lt;ul&gt;
&lt;li&gt;一个比完全公平竞争优化的方法：在lock队列为空时，线程可以使用tryAcquire来获取锁，这样有一个线程可以不必入队获取到锁，得到性能的一点优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reference
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gee.cs.oswego.edu/dl/papers/aqs.pdf&#34;&gt;http://gee.cs.oswego.edu/dl/papers/aqs.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.inoreader.com/article/3a9c6e78f01cc939-juc-aqs&#34;&gt;https://www.inoreader.com/article/3a9c6e78f01cc939-juc-aqs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>斯科特杨的高效率方法</title>
      <link>https://b1indsight.github.io/post/effecient_method_of_scotty/</link>
      <pubDate>Sun, 05 May 2019 16:27:50 +0800</pubDate>
      
      <guid>https://b1indsight.github.io/post/effecient_method_of_scotty/</guid>
      <description>&lt;p&gt;在阅读了Scoltt Yang的几本关于高效率的书之后，总结并试着运用了一些关于高效率的方法，在这里做一些总结。&lt;/p&gt;
&lt;h3 id=&#34;日周目标清单&#34;&gt;日/周目标清单&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;建立一个周目标清单，并在每天开始的时候将清单中的一些任务添加到日目标清单中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每天日目标清单中的主要工作应该不超过3个，可以让你分配主要的精力在这些任务上面。（这条原则来自于《精力管理》）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在做完清单中的所有项之后立刻开始休息，即使你仅使用了3个小时就完成了今天的任务，也要避免继续添加今天的任务，正如我们在小时候会有即使做完作业也会被父母继续添加任务这样的经历，我们应当避免把日目标清单变成普通的todo-list，从而减少每天完成任务的动力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每周工作六天，在每周的最后一天不要设置任何需要大量精力的任务，为自己思考休息提供充足的空闲，给自己干涸的电池充满电。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;精力管理&#34;&gt;精力管理&lt;/h3&gt;
&lt;p&gt;我们在工作时应当管理的是我们的精力和任务，而非时间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安排你的食物，少食多餐，每天吃4-6餐。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;工作90-120分钟休息一次，注意力是消耗品，同时也需要锻炼。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将每天固定要做的事建立为习惯，让这些事自动完成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;做自己想要去做的事，而不是应该去做的事。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;建立习惯&#34;&gt;建立习惯&lt;/h3&gt;
&lt;p&gt;30天建立一个习惯，并将它写在纸上或者以文档记录下来，在最初的30天之内，一旦在某一天停止就重新开始计数，重新坚持30天。
之后便可以不必坚持的如此严格，身体会自动将它完成。&lt;/p&gt;
&lt;p&gt;选择要建立的习惯时推荐阅读《Zen to do》&lt;/p&gt;
&lt;h3 id=&#34;批处理&#34;&gt;批处理&lt;/h3&gt;
&lt;p&gt;生活中有大量的事情可以使用批处理来解决，把大量原本填充到其他空余时间的事情集中解决，从而可以节省出大量额外的时间。&lt;/p&gt;
&lt;p&gt;以下几类事情可以使用批处理的办法来解决：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阅读
集中阅读订阅的博客或者文章，每日学习工作中的阅读任务也可以批处理来解决。&lt;/li&gt;
&lt;li&gt;邮件处理/拨打电话/社会联系&lt;/li&gt;
&lt;li&gt;作业/写博客/电脑工作 
一次性做这些工作可能会花费大量的时间，但是可以避免每天进入专注时花费的时间，也不必使自己承受拖延的痛苦。&lt;/li&gt;
&lt;li&gt;清扫/购物 
将家务之类的事务在每周的某一天集中完成，可以避免陷入无尽的家务漩涡。&lt;/li&gt;
&lt;li&gt;思考/设置目标
在周日把自己的项目或者一些任务放入自己的周清单，使用完整的一块时间来进行计划，远比使用小段时间计划要好。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://b1indsight.github.io/about/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://b1indsight.github.io/about/</guid>
      <description>&lt;p&gt;test&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>