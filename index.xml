<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>b1indsight</title>
    <link>https://b1indsight.github.io/</link>
    <description>b1indsight</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 10 Aug 2023 00:45:00 +0800</lastBuildDate>
    
    <atom:link href="https://b1indsight.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>正常事故</title>
      <link>https://b1indsight.github.io/post/normal_accident/</link>
      <pubDate>Thu, 10 Aug 2023 00:45:00 +0800</pubDate>
      
      <guid>https://b1indsight.github.io/post/normal_accident/</guid>
      <description>&lt;p&gt;在查尔斯·佩罗的《高风险系统与正常事故》（后面简称《正常事故》）这本书中，作者认为一些高风险技术的特征表明，不管常规安全措施如何，一种事故的发生是不可避免甚至是正常的。本期的主要内容便是自三里岛事故的部分介绍开始，对正常事故的一些讨论。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;三里岛事故&#34; &gt;三里岛事故
&lt;span&gt;
    &lt;a href=&#34;#%e4%b8%89%e9%87%8c%e5%b2%9b%e4%ba%8b%e6%95%85&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;让我们首先从1979年的三里岛核电厂事故看起，这指的是1979年3月28日三里岛核电站发生的一次部分堆芯熔毁事故，场内污染清理从1979年8月开始，直到1993年12月结束。在查尔斯·佩罗写作《正常事故》这本书的时间点看起，三里岛事故是迄今为止最严重的核电厂事故，而相对于现在来说，依然是美国商用核电历史上最严重的事故。首先介绍一些相关系统的信息。&lt;/p&gt;
&lt;p&gt;机组的&lt;a href=&#34;https://zh.wikipedia.org/wiki/File:Tmi-2_schematic.svg&#34;&gt;结构简图&lt;/a&gt;如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://private-user-images.githubusercontent.com/47165749/259489432-0f73ca2a-f484-4ff8-82c7-ec4fff8457ed.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTEiLCJleHAiOjE2OTE2MDA1NDgsIm5iZiI6MTY5MTYwMDI0OCwicGF0aCI6Ii80NzE2NTc0OS8yNTk0ODk0MzItMGY3M2NhMmEtZjQ4NC00ZmY4LTgyYzctZWM0ZmZmODQ1N2VkLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFJV05KWUFYNENTVkVINTNBJTJGMjAyMzA4MDklMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjMwODA5VDE2NTcyOFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTk3YjFlOTliNjRiNzhiY2MzODZlMTE4MGUzMzJlOTEyNDBhMjk4M2Q2YmJkYWZmNjBhODhkYmI2NGNkOGQyOTkmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.-MSSl2JtwtYOiyVhSsRgwUsgt0yUYTElJrsLxGjOvyE&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以转化为下图的示意图：
&lt;img src=&#34;https://private-user-images.githubusercontent.com/47165749/259489651-894476dc-81a8-4991-9dbc-d41309821dd0.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTEiLCJleHAiOjE2OTE2MDA2MDcsIm5iZiI6MTY5MTYwMDMwNywicGF0aCI6Ii80NzE2NTc0OS8yNTk0ODk2NTEtODk0NDc2ZGMtODFhOC00OTkxLTlkYmMtZDQxMzA5ODIxZGQwLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFJV05KWUFYNENTVkVINTNBJTJGMjAyMzA4MDklMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjMwODA5VDE2NTgyN1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTU5NjIxYzZiZTllYzc3ZmE4MDhlZWMyOWVjM2EzMjY1OTM5ZjViOTY1MzRjY2ZmN2YyNzUwYzhkZTIwMmE2YjUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.6ijm8HLv9VhKNN_rxCYKBX1NeZhDTnsvuFKxcEJSL9w&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;系统简述&#34; &gt;系统简述
&lt;span&gt;
    &lt;a href=&#34;#%e7%b3%bb%e7%bb%9f%e7%ae%80%e8%bf%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;反应堆正常工作时，初级冷却系统的水始终保持高温高压流经堆芯，经过蒸汽发生器淋到次级冷却系统的水管上，次级系统的水转化为蒸汽驱动涡轮发电机。&lt;/p&gt;
&lt;p&gt;初级冷却系统涉及以下一些自动安全装置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自控减压阀在堆芯压力过高时放出堆芯的水来减少压力，但是自控减压阀开启时间不宜过长，因为当排出的水过多压力太低，高温的水将变成蒸汽泡阻塞初级冷却系统，会阻碍冷却水流动，造成部分位置过热并再次启动裂变反应。&lt;/li&gt;
&lt;li&gt;为了防止压力降低之后高温水变为蒸汽，两个反应水冷却泵会自动启动向初级冷却系统注水降温。
高压注入泵向堆芯注入高压冷却水降低温度。但是高压注入泵注入的高压冷水可能使堆芯产生裂痕，为防止高压注入泵的副作用，高压注入泵和堆芯之间通过缓压器来减少压力。缓压器是一个下半部为水上半部为蒸汽的罐子，当注入的水过多，缓压器会被注满，可能导致冷却水管破裂，造成失水事故，严重的情况会导致堆芯熔融。&lt;/li&gt;
&lt;li&gt;次级冷却系统保持高压，次级冷却系统的水与初级冷却系统保持隔离，而且鉴于涡轮机叶片十分精细，所以必须保持纯净，因此有一个冷凝水净化系统来清除微粒。紧急给水泵在主供水泵停机时将紧急储水箱的水抽出来，维持次级冷却系统工作，两个管道阀门均含有指示灯。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;事故发生&#34; &gt;事故发生
&lt;span&gt;
    &lt;a href=&#34;#%e4%ba%8b%e6%95%85%e5%8f%91%e7%94%9f&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;冷凝水净化器在二号堆启用几个月后坏过3次，而3月28日凌晨4点汽轮机不转了，事后分析是由于净化器封焊口漏出大约一杯水量的水。水的湿气进入了仪器控制系统，结果导致水泵停止工作，冷水不再流动，于是汽轮机随后停止。&lt;/p&gt;
&lt;p&gt;紧急给水泵随后试图供水，用来补充次级供水系统的水，但是两天前检修后，管道阀门全是关闭位置，操作者知道紧急给水泵在运行，但是并不知道管道不通。这两个供水指示灯虽然指示阀门关闭，但是其中一个灯被挂在开关上的修理标签遮住了，鉴于操作者没有想到阀门是关的，所以并没有立刻去看阀门指示灯，而在八分钟之后才发现阀门没打开，但此时已经造成一部分危害。&lt;/p&gt;
&lt;p&gt;进入事故状态13秒，次级冷却系统缺水之后，蒸汽发生器很快烧干，初级冷却系统温度居高不下，堆芯无法冷却，因此反应堆急停，但是衰减的放射性物资仍然还在产生热量。高压触发自控减压阀，放出堆芯的水到缓压器，因为自控减压阀不能开启过长，并且堆芯压力迅速下降，于是操作者决定关闭自控减压阀，但是由于出现一些故障，导致自控减压阀没有完全关闭，冷却水仍然在漏出。鉴于减压阀在之前出现过故障，前不久为此加了一个指示灯，以便操作者观察是否复位，但是指示灯在阀门收到关闭脉冲时标志阀门关闭，而不是阀门事实上关闭，于是操作者认为自控减压阀一切正常。&lt;/p&gt;
&lt;p&gt;在进入事故状态后的两三分钟内，水不断通过自控减压阀漏出，但是堆芯温度并没有下降，这样过热的水即将变为蒸汽，于是反应水冷却泵向堆芯注水，此时由于未知的原因造成了冷却水稳定的假象，一切似乎有所控制。&lt;/p&gt;
&lt;p&gt;进入事故状态的两分钟后，冷却水并未稳定，此时堆芯仍然在失水，初级冷却系统中压力剧降，高压注入泵自动启动，因为之上提过的高压注入泵的原因，高压注入泵在注入2分钟之后就被操作员手动降低了注入速度。高压注入泵启动之后，一个表指出堆芯压力正在减少，而另一个指示表显示缓压器压力正在升高。此时的状况使操作者迷惑不解，一般情况下缓压器和堆芯压力升降趋势应该一致，此时选择相信哪一个指示表造成了一个两难问题，而反应堆的生产厂家和用户都很注意在培训时让操作者树立缓压器不能注满的观念，此时操作者选择更加熟悉的高压注入和缓压器的相互关系，急剧降低了高压注入速度。&lt;/p&gt;
&lt;p&gt;二号堆的设计造成无法直接测量堆芯水面高度，但是此时还有三个读数可能了解到发生失水事故，一个是污水池压力，水经由自控减压阀-&amp;gt;缓压器被排放到污水池，污水池压力增加。但是设计者不认为这是一个重要指标，指示灯布置在七英尺高控制板背面靠近底部的位置，在没有人意识到发生失水事故的情况下，查看度数是个费力不讨好的动作，所以谁也不乐意去看。另一是污水池温度，污水池接受堆芯内的高温水，导致温度升高。但是有一个自控减压阀已经漏水好几个星期，冷却水总是漏出，导致污水池温度总是偏高。剩余一个读数是堆芯压力，但是正如之前所说，操作员相信堆芯压力指示表有问题，因为它与缓压器压力读数相矛盾。&lt;/p&gt;
&lt;p&gt;在进入事故状态四五分钟后，由于初级冷却系统失水，反应水冷却泵没有足够水流过，开始剧烈颤动，声音大到控制室都可以听到。操作者们紧急开会之后，鉴于水泵可能顶不住如此剧烈的颤动，于是决定紧急关泵。&lt;/p&gt;
&lt;p&gt;在进入事故状态2小时20分钟之后，终于有人意识到自控减压阀出了问题，发现阀门并没有复位，于是紧急关闭了一个截止阀。在事后听证会上，一位操作者作证这这个措施是忙乱中瞎碰运气，幸好这个措施及时阻止了堆芯完全熔融。&lt;/p&gt;
&lt;p&gt;进入事故状态33小时，控制室的人听到了轻微爆炸声，安全壳压力计度数突然跳到了安全壳设计极限的一半。这是由于堆芯燃料棒的锆合金外壳与水蒸气发生反应放出氢气，形成氢气泡，氢气可能从堆罩中经自控减压阀进入安全壳，造成氢气爆炸。在场的某人知道发生了氢气爆炸，于是让另一名操作者不要再启动一台出故障的水泵（水泵马达启动时会产生火花）。&lt;/p&gt;
&lt;h2 id=&#34;正常事故&#34; &gt;正常事故
&lt;span&gt;
    &lt;a href=&#34;#%e6%ad%a3%e5%b8%b8%e4%ba%8b%e6%95%85&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;在大多数高风险系统中，由于系统的一些特性导致事故是不可避免的，以至于产生事故被看作是自然发生的，我们把这些事故叫做正常事故。三里岛事故就是一个典型的正常事故。&lt;/p&gt;
&lt;p&gt;正常事故有几个典型的特征：系统中的各组件作用是预料外的，而且在紧要关头是不可理解的；由于系统特征，事故的破坏速度显著超过维护者抢救的速度，破坏范围不断扩大，而事故层出不穷。&lt;/p&gt;
&lt;p&gt;考虑第一个特征，三里岛事故可以看作是由一些故障复合而成的，分别是1.净化器漏水，2.紧急给水泵阀门被误关闭，3.自控减压阀无法复位，4.自控减压阀的指示灯失灵。这四个故障如果单独发生，仅仅是连事件都算不上的小问题，如果提前得知这些故障，也无从想出会产生这样的事故，因此可以把这个事故划为系统事故，即多重故障以不可预期的方式相互作用。在操作者的视角观察，净化器漏水导致汽轮机停机几乎预想不到；次级冷却系统故障导致初级冷却系统烧干也很难立刻联想到，或者说等到联想到这个问题，已经太迟了；缓压器与堆芯由管道连接，但是缓压器压力上升而堆芯压力迅速下降，此时也造成了疑惑，鉴于之前从未发生失水事故，因此操作者能全面接受堆芯压力指示而无视手册上防止缓压器注满的警告，这一要求也显得强人所难；堆芯发生锆-水反应导致氢气爆炸同样是不可理解的。这些系统的运行路径均是超过设计的生产路径的，而产生的警告信号必须要能与思维模式吻合才能使操作者理解并产生警告效果。更不必说警告信号也同样是故障的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;部分原因在于，这种人机系统中的相互作用确实 是看不见的(这里，“看不见的”取其本义) , 另一部分原因在于，即使能看见这种相互作用，人们也不相信。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二个特征就很好理解，事故破坏范围迅速扩大，在13秒的时间内蒸汽发生器便烧干了，堆芯自控减压阀启动，如果想对它做出什么处理的话，必须要求操作者理解次级冷却系统的故障造成了初级冷却系统的事故，这一切都要在13秒内进行。随后2，3分钟后两难问题出现，缓压器压力到达高点且在继续上升，堆芯压力却在下降，操作者需要在缓压器注满前紧急减少高压注水的速度（操作手册中如此写着），或是相信堆芯压力下降，冒着可能的（他们考虑中的）失水风险继续注水。事故状态四五分钟后，操作室又听到输运泵的震动，事故层出不穷。可以看到事故恶化的速度远超操作员理解的速度，操作员不得不在两到三分钟之内理解新的险情的运作方式才有可能做出正确决定，而这是显然不可能的。&lt;/p&gt;
&lt;p&gt;而产生正常事故这些特征的原因，主要在于系统组成的特征，查尔斯·佩罗在《正常事故》中提出了两个衡量标准，其一可以被称为复杂度，坐标轴的两端是线性系统-复杂系统。线性系统划分各个生产阶段，每个生产阶段在空间上分离,生产阶段内及生产阶段间主要保持序贯式的联系，系统中的反馈极少，而且反馈信息更多是直接的。复杂系统中每个生产阶段的组件相互接近，产生许多共模联系，具有不熟悉或预想不到的反馈回路，指标和控制参数之间相互作用，系统的状况需要从反馈信息中推断而不是直接获得，另外有一些完全没搞清的工艺过程。&lt;/p&gt;
&lt;p&gt;另一系统衡量标准是系统的配合特性，坐标轴的两端是紧配合-松配合，在紧配合的系统中工序的工艺流程相关性很高且难以拖延，同时工序恒定而通常环节设计为只有一种方式到达目标，另外紧配合系统具有很少的松弛环节，某一环节出错难以使用其它资源临时替代。而松配合系统则与之相反。在紧配合系统这些特征之外，我认为可以另一导致紧配合系统的特点在于系统中上一环节组件异常之后影响到下一环节所需的时间很短（特别是相对于操作者或决策者理解现状的时间），这可能会导致操作者无法做出正确应对，更糟糕的情况下会扩大事故影响范围。&lt;/p&gt;
&lt;p&gt;系统的复杂度和配合特性可以看作是两个相互独立的特征范围，在这两个坐标轴构成的坐标系中，具有紧配合的复杂系统这样的结构导致出现事故是不可避免的，甚至是正常的。&lt;/p&gt;
&lt;h2 id=&#34;一些附属的风险系统&#34; &gt;一些附属的风险系统
&lt;span&gt;
    &lt;a href=&#34;#%e4%b8%80%e4%ba%9b%e9%99%84%e5%b1%9e%e7%9a%84%e9%a3%8e%e9%99%a9%e7%b3%bb%e7%bb%9f&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;错误引致系统&#34; &gt;错误引致系统
&lt;span&gt;
    &lt;a href=&#34;#%e9%94%99%e8%af%af%e5%bc%95%e8%87%b4%e7%b3%bb%e7%bb%9f&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;错误引致系统的特殊之处在于错误是由系统各组元的组合方式造成的，对组元的改进或变化，不是由其他部分不予合作而不行，或是其他部分将得到强烈表现而使变化毫无意义。《正常事故》中认为水上运输是一个错误引致系统，技术手段的进步促进了生产，但也促进了事故的发生。另外同样有利于巩固这个结构。&lt;/p&gt;
&lt;h3 id=&#34;自激系统&#34; &gt;自激系统
&lt;span&gt;
    &lt;a href=&#34;#%e8%87%aa%e6%bf%80%e7%b3%bb%e7%bb%9f&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;核武的侦测系统似乎是这一种系统，侦测方需要从环境噪音中正确判断信号，而鉴于后果严重，系统不仅需要防止故障，而且要杜绝故障被掩盖的可能性。攻击方则要使信号更加贴近环境噪音，缩短侦测者的反应时间，对侦测者施加破坏以造成故障。这样侦测系统的复杂度和配合特性的提升是有意造成且自我激发形成正反馈回路的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最后谈一些错误认知。在几乎所有的事故回顾中，严重疏忽和无能都是存在的，不安全的操作，偷工减料的设备，无视安全规范的设计层出不穷，一旦发生事故，人们总会找到容易发生重大事故的主要原因。在这里必须说明的地方在于，可以说组织无能是组织的正常状态，在生产压力下疏忽和错误也是不可避免的，即使出现一些错误征兆，人们也倾向于忽略它或是将它解释为熟悉的状态，几乎不可能为了事故隐患而每次停机，然而回顾往事时总能找到这些警告信号。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Super函数和mro算法</title>
      <link>https://b1indsight.github.io/post/super_and_mro_algorithm/</link>
      <pubDate>Wed, 02 Mar 2022 22:03:50 +0800</pubDate>
      
      <guid>https://b1indsight.github.io/post/super_and_mro_algorithm/</guid>
      <description>&lt;p&gt;&lt;code&gt;super()&lt;/code&gt;作为在python中常被使用到的一个方法而言，具有一些有趣的特性，本文可以看作&lt;code&gt;super()&lt;/code&gt;的一个考古，主要包括以下几个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;super()&lt;/code&gt;的定义和用法&lt;/li&gt;
&lt;li&gt;构造&lt;code&gt;__mro__&lt;/code&gt;属性中类继承顺序线性化的算法&lt;/li&gt;
&lt;li&gt;提供了一个&lt;code&gt;super()&lt;/code&gt;的简单实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;super的定义和用法&#34; &gt;&lt;code&gt;super()&lt;/code&gt;的定义和用法
&lt;span&gt;
    &lt;a href=&#34;#super%e7%9a%84%e5%ae%9a%e4%b9%89%e5%92%8c%e7%94%a8%e6%b3%95&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;首先提供一个&lt;code&gt;super(type, object-or-type)&lt;/code&gt;的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在&lt;code&gt;object-or-type&lt;/code&gt;中__mro__指定的搜索路径中,返回&lt;code&gt;type&lt;/code&gt;后的下一个类对象的代理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如&lt;code&gt;object-or-type&lt;/code&gt;的&lt;code&gt;__mro__&lt;/code&gt;指定的查找路径为D-&amp;gt;B-&amp;gt;C-&amp;gt;A-&amp;gt;object, 并且&lt;code&gt;type&lt;/code&gt;的值为B，则&lt;code&gt;super(type, object-or-type)&lt;/code&gt;将返回路径中B的下一个类C的代理。&lt;/p&gt;
&lt;h3 id=&#34;关于未绑定的一个问题&#34; &gt;关于未绑定的一个问题
&lt;span&gt;
    &lt;a href=&#34;#%e5%85%b3%e4%ba%8e%e6%9c%aa%e7%bb%91%e5%ae%9a%e7%9a%84%e4%b8%80%e4%b8%aa%e9%97%ae%e9%a2%98&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;super()&lt;/code&gt;的两个参数都是可选参数，如果省略第二个参数，则返回一个未绑定的超类对象。在这个角度中，&lt;code&gt;super()&lt;/code&gt;返回的代理对象与&lt;code&gt;super()&lt;/code&gt;的第二个参数绑定。&lt;/p&gt;
&lt;p&gt;这一点可以用以下的代码测试：先构造两个类A，B，并初始化&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;obj A&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__class__&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__name__) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;(A):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        super()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__init__()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;obj B&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        super()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__class__&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__name__) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; A()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; B()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时执行&lt;code&gt;super(B)&lt;/code&gt;将返回一个未绑定的类&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; super(B)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;super: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;, NULL&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而&lt;code&gt;super(B,B)&lt;/code&gt;则会返回&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; super(B, B)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;super: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;, &amp;lt;B object&amp;gt;&amp;gt; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时输出&lt;code&gt;super(B).method&lt;/code&gt;在一些&lt;a href=&#34;https://stackoverflow.com/a/22403976&#34;&gt;说明&lt;/a&gt;中会指出将返回一个未绑定的方法（像&lt;code&gt;&amp;lt;unbound method A.method&amp;gt;&lt;/code&gt;）,但在当前的实现中，将是如下状况&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; super(B)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;AttributeError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;super&amp;#39; object has no attribute &amp;#39;method&amp;#39;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而同时并不像&lt;a href=&#34;https://www.artima.com/weblogs/viewpost.jsp?thread=236278&#34;&gt;博客&lt;/a&gt;中所说，&lt;code&gt;super(B,B)&lt;/code&gt;的行为现在也有所不同&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; super(B, B)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;function A&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method at &lt;span style=&#34;color:#ae81ff&#34;&gt;0x059976A0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 而在调用这个函数的时候，可以通过手动将一个对象为参数来使其正确执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; super(B, B)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method(b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;B
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;未绑定的代理对象，必须要指定一个对象绑定，才可以继续正常使用，例如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; super(B)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__get__(b, B)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;super: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;, &amp;lt;B object&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 这个对象与super(B, b)相同&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; super(B)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__get__(b, B)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Guido对这一个用处有一个回应：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for proposing this &amp;ndash; I&amp;rsquo;ve been scratching my head wondering what the use of unbound super() would be. :-) I&amp;rsquo;m fine with killing it &amp;ndash; perhaps someone can do a bit of research to try and find out if there are any real-life uses (apart from various auto-super clones)?*&lt;/em&gt; &amp;mdash; Guido van Rossum&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有点茴字的四种写法的味道了。&lt;/p&gt;
&lt;h3 id=&#34;super在python3&#34; &gt;&lt;code&gt;super()&lt;/code&gt;在python3
&lt;span&gt;
    &lt;a href=&#34;#super%e5%9c%a8python3&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;python3 中&lt;code&gt;super()&lt;/code&gt;是最通常使用的一种方式， &lt;code&gt;super()&lt;/code&gt;通常（只能被）使用在class定义中，用来返回一个父类的代理.&lt;/p&gt;
&lt;p&gt;这个用法起初在&lt;a href=&#34;https://www.python.org/dev/peps/pep-3135/&#34;&gt;PEP3135&lt;/a&gt;提出，本是基于DRY原则为了避免在原本的用法中出现的两个问题：1.原本&lt;code&gt;super(class_name,self)&lt;/code&gt;的用法会在类定义的多个地方重复类名，如果类名改变，则多处的class_name也需要改变，这样就容易遗漏。2.在使用类装饰器的class中类名指定的类并不是原本方法所在的类对象，这样造成的行为与期望产生差距&lt;/p&gt;
&lt;p&gt;Guido原本设想super作为一个keyword，然后使用cell来实现super可以指代当前的类，但之后他认为这个idea“too magic”，重新赞成使用super()来实现，并需要一个magic变量&lt;code&gt;__class__&lt;/code&gt;来作为一个妥协方法&lt;/p&gt;
&lt;p&gt;这样当在类中使用&lt;code&gt;super&lt;/code&gt;变量时，会寻找&lt;code&gt;__class__&lt;/code&gt;来组合闭包，当你在全局范围类将super重命名为s，然后在类中使用s()，就会出现异常&lt;code&gt;RuntimeError: super(): __class__ cell not found&lt;/code&gt;，但依然可以如同通常方式一样工作。另外一个有趣的地方在于，只要在s()之前引用&lt;code&gt;__class__&lt;/code&gt;或&lt;code&gt;super&lt;/code&gt;(仅仅只需要在s()之前出现)，s()就会如同super()一样正常工作。&lt;/p&gt;
&lt;p&gt;super()被广泛使用得以避免了一个问题：&lt;code&gt;super&lt;/code&gt;在使用中会被误用为&lt;code&gt;super(type(self), self)&lt;/code&gt;或&lt;code&gt;super(self.__class__, self)&lt;/code&gt;，这时，在以下的情况会进入无限循环&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;(A):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        super(type(self), self)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;(B):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        super(C, self)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;C()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这里&lt;code&gt;C().method()&lt;/code&gt;，调用了&lt;code&gt;super(C, self).method()&lt;/code&gt;，此时调用的是B的method()方法，但其中的 &lt;code&gt;type(self)&lt;/code&gt;参数，所返回的类依然是C，而不是期望中的B，这样&lt;code&gt;super(type(self), self)&lt;/code&gt; 依然是B类自身。&lt;/p&gt;
&lt;h2 id=&#34;__mro__的构造和c3线性化方法&#34; &gt;&lt;code&gt;__mro__&lt;/code&gt;的构造和C3线性化方法
&lt;span&gt;
    &lt;a href=&#34;#__mro__%e7%9a%84%e6%9e%84%e9%80%a0%e5%92%8cc3%e7%ba%bf%e6%80%a7%e5%8c%96%e6%96%b9%e6%b3%95&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;在python2.3之前的版本中，__mro__基本遵循继承顺序自左向右深度优先的属性构造，而在python2.3中引入了新式类，所有的类继承链的根部均为object对象，这样就很容易构造一个钻石形的继承图，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __getattribute__(self, name):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;(A):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __getattribute__(self, name):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;(A):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __getattribute__(self, name):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;D&lt;/span&gt;(B, C):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __getattribute__(self, name):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;构造的继承图如下
&lt;img src=&#34;../../img/diamond_diagram.png&#34; alt=&#34;继承图&#34;&gt;&lt;/p&gt;
&lt;p&gt;按python2.2中的线性化方法，类D的mro顺序为D-&amp;gt;B-&amp;gt;A-&amp;gt;C-&amp;gt;A。这样，当在D中使用&lt;code&gt;__getattribute__()&lt;/code&gt;方法时，&lt;code&gt;super().__getattribute__()&lt;/code&gt;调用B中的&lt;code&gt;__getattribute__()&lt;/code&gt;方法，然后调用&lt;code&gt;A.__getattribute__()&lt;/code&gt;，由于A的&lt;code&gt;__getattribute__()&lt;/code&gt;直接继承自object，而object作为根类并不会调用&lt;code&gt;super()&lt;/code&gt;,这样C的&lt;code&gt;__getattribute__()&lt;/code&gt;方法就被忽略了。&lt;/p&gt;
&lt;p&gt;在出现这样钻石继承图的情况中，一个替代的解决方法是自己组织调用层次来避免如以上的情况（或者重复调用A中方法的情况）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 一个替代方法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;(A):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_method&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 这里写B独有的方法部分&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_method()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        A&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;(A):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_method&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 这里写C独有的方法部分&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_method()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        A&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;D&lt;/span&gt;(B, C):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_method&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 这里写D独有的方法部分&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_method()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        B&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_method(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        C&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_method(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        A&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method(self)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种办法一方面将一个完整的方法分割到了两个函数中，对于方法的理解存在负面影响。更加严重的是，这个方法导致在实现D的&lt;code&gt;method()&lt;/code&gt;方法时，必须了解类B，C的实现，并协调A的&lt;code&gt;method()&lt;/code&gt;方法，这样原本为封装信息的继承方法造成了信息泄露；同时将继承结构的细节与D类绑定了，这样若之后要对B或C类的继承方式做修改时，需要同时修改它们的子类。&lt;/p&gt;
&lt;p&gt;在python2.2及之前的版本中，钻石型继承并不常出现，而在2.3版本中引入了新式类&amp;ndash;一个关键点在于所有的类继承自object&amp;ndash;造成了钻石形的继承关系出现次数大大增加。这样，引入一个新的线性化算法就变得必要了。&lt;sup&gt;[1]&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id=&#34;c3线性化算法&#34; &gt;C3线性化算法
&lt;span&gt;
    &lt;a href=&#34;#c3%e7%ba%bf%e6%80%a7%e5%8c%96%e7%ae%97%e6%b3%95&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;前置的约定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我们用ABCD&amp;hellip;N来指代由A-&amp;gt;B-&amp;gt;C-&amp;gt;D&amp;hellip;-&amp;gt;N的mro，其中A为mro的头部，其余作为尾部&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设定A + B&amp;hellip;N = AB&amp;hellip;N&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用L(C)来表示C的线性化结果&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么，C3算法可以被描述为以下几条原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设一个类C，C线性化后的mro为C与对C的父类mro和C的继承顺序构造的一个mro做合并操作的结果之和， 用公式描述则是：&lt;code&gt;L(C) = C + merge(L(A), L(B), ..., AB...)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根类的mro为它自己, 也就是有&lt;code&gt;L(O) = O&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;merge的算法是: 在merge的参数中，先选择一个mro的头部，如果这个头部不在之后所有的mro的尾部中，那么就将这个头加入merge结果的mro中，并在其他参数的mro中去除这个头部， 否则选择下一个mro。重复这个过程，直到merge中没有元素，或者无法找到头部（此时抛出一个异常）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;算法本身描述比较抽象，只要用一个例子说明，就会很容易理解：&lt;/p&gt;
&lt;p&gt;先构造一系列类：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;O &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; object
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;F&lt;/span&gt;(O): &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;(O): &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;D&lt;/span&gt;(O): &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;(D,F): &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;(E,D): &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;(B,C): &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这些类存在着如下图的继承关系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/diamond_diagram_2.png&#34; alt=&#34;继承关系&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时根据算法有：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# O 的mro为O本身&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L(O) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; O
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L(F) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; merge(L(O), O) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; merge(O, O)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; O 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FO
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L(E) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EO
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L(D) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DO
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;继续：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L(C) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; merge(L(D), L(F), DF) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; merge(DO, FO, DF) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;# 先选择DO的头部D，D不在FO的尾部中，D同时是DF的头部，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;# 所以将D作为merge结果的头部，并且在参数中去掉D&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; D &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; merge(O, FO, F)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;# 同理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; D &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; F &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; merge(O, O)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CDFO
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L(B) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BEDO
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L(A) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; merge(L(B), L(C), BC)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; merge(BEDO, CDFO, BC)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; B &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; merge(EDO, CDFO, C)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; B &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; E &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; merge(DO, CDFO, C)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; B &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; E &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; merge(DO, DFO)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; B &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; E &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; D &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; merge(O, FO)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; B &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; E &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; D &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; F &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; merge(O, O)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ABECDFO
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到C3线性化方法中，E类相比类C在继承顺序上更接近与根O，但是mro中位置却在C之前。C3线性化的一个优点在于整个继承结构中的所有的类的mro均是单调的，也就是说C3线性化方法具有单调性。&lt;/p&gt;
&lt;h2 id=&#34;super实现&#34; &gt;&lt;code&gt;super()&lt;/code&gt;实现
&lt;span&gt;
    &lt;a href=&#34;#super%e5%ae%9e%e7%8e%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;使用者通过&lt;code&gt;super()&lt;/code&gt;返回的代理对象来获取对应对象的属性，可以通过将&lt;code&gt;super()&lt;/code&gt;实现为一个描述器来做到这一点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new_super&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, object&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# super利用__class__组成闭包，这时__class__指向定义时所在的类，而不是运行时&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# 在具体的实现中，__class__在编译时被写入闭包&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __class__ &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RuntimeError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;super(): no arguments&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__type__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __class__
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__type__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; type
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__object__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; object
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __get__(self, obj, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 如果没有指定第二个参数，可以用__get__方法来与obj绑定&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__object__ &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; new_super(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__type__, obj)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __getattr__(self, attr):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isinstance(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__object__, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__type__):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            starttype &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__object__&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__class__
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            starttype &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__object__
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mro &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; iter(starttype&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__mro__)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; cls &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; mro:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; cls &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__type__:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; cls &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; mro:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; attr &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cls&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__dict__:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cls&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__dict__[attr]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; hasattr(x, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__get__&amp;#39;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__get__(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__object__)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AttributeError&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Q&#39;s magic</title>
      <link>https://b1indsight.github.io/post/q_magic/</link>
      <pubDate>Sun, 20 Sep 2020 17:05:31 +0800</pubDate>
      
      <guid>https://b1indsight.github.io/post/q_magic/</guid>
      <description>&lt;h2 id=&#34;前言&#34; &gt;前言
&lt;span&gt;
    &lt;a href=&#34;#%e5%89%8d%e8%a8%80&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Q 是一个开源库，正如它介绍里所写的那样，它是用来“Quick and dirty debugging output for tired programmers.”，Q的用法主要有两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;import q&lt;/code&gt;之后， 使用&lt;code&gt;q(value)&lt;/code&gt;来 print value 的值，或是使用&lt;code&gt;q/value&lt;/code&gt;， 或者&lt;code&gt;q|value&lt;/code&gt;，只要在想 print 的值前加“q/”或“q|”的前缀，即可以print值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在函数定义前加&lt;code&gt;@q&lt;/code&gt;的修饰器,可以print 函数参数，返回值，运行时间等信息
本文用来展示q这个库是如何在300+行代码的篇幅下，完成这样的功能的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;import-q之后为什么可以直接使用q和q&#34; &gt;&lt;code&gt;import q&lt;/code&gt;之后为什么可以直接使用q()和@q
&lt;span&gt;
    &lt;a href=&#34;#import-q%e4%b9%8b%e5%90%8e%e4%b8%ba%e4%bb%80%e4%b9%88%e5%8f%af%e4%bb%a5%e7%9b%b4%e6%8e%a5%e4%bd%bf%e7%94%a8q%e5%92%8cq&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;想做到这件事的办法可以想到，如同其他语言一样&lt;code&gt;q()&lt;/code&gt;需要被实现成一个全局的静态函数，在python中，则是在import时完成class q的实例化，那么另一个问题是，q 中 class 名是 Q ，那么调用应该是&lt;code&gt;Q.q()&lt;/code&gt;，而不是q()，这部分的实现关键在于它将自己装载在了&lt;code&gt;sys.module&lt;/code&gt;中,通过这条语句&lt;code&gt;sys.modules[&#39;q&#39;] = Q()&lt;/code&gt;并在class中实现&lt;code&gt;__call__()&lt;/code&gt;函数，使得可以直接使用q()&lt;/p&gt;
&lt;h2 id=&#34;qvalue如何实现&#34; &gt;&lt;code&gt;q/value&lt;/code&gt;如何实现
&lt;span&gt;
    &lt;a href=&#34;#qvalue%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;q/value&lt;/code&gt; 修改一下格式就变为 &lt;code&gt;q / value&lt;/code&gt;， 同时源码里也可以看到其中有&lt;code&gt;__truediv__()&lt;/code&gt;函数，于是发现这里的实现在于 q 重载了&lt;code&gt;/&lt;/code&gt;和&lt;code&gt;|&lt;/code&gt;运算，使得这个运算符在执行了q print的操作之后返回&lt;code&gt;__truediv__()&lt;/code&gt;的第二个参数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;object.&lt;strong&gt;truediv&lt;/strong&gt;(self, other)
调用这些方法来实现二进制算术运算 (+, -, *, @, /, //, %, divmod(), pow(), **, &amp;laquo;, &amp;raquo;, &amp;amp;, ^, |)。例如，求表达式 x + y 的值，其中 x 是具有 &lt;strong&gt;add&lt;/strong&gt;() 方法的类的一个实例，则会调用 x.&lt;strong&gt;add&lt;/strong&gt;(y)。
&lt;a href=&#34;https://docs.python.org/zh-cn/3/reference/datamodel.html?highlight=truediv#object.__truediv__&#34;&gt;python数据模型&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里可以看到 q/value 时会调用 q 的&lt;code&gt;__truediv__()&lt;/code&gt;函数，这样在 q 重载了这个函数的时候，达到了重载操作符的效果。&lt;/p&gt;
&lt;h2 id=&#34;q如何实现&#34; &gt;&lt;code&gt;@q&lt;/code&gt;如何实现
&lt;span&gt;
    &lt;a href=&#34;#q%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;q被调用时调用了&lt;code&gt;__call__()&lt;/code&gt;函数，这个函数主要做了有关的几件事：&lt;code&gt;self.inspect.getframeinfo(self.sys._getframe(1), context=9)&lt;/code&gt;通过&lt;code&gt;getframeinfo()&lt;/code&gt;来获取调用附近的代码文本块，打印被修饰函数的基本信息，然后扫描文本块返回&lt;code&gt;self.trace()&lt;/code&gt;, python 定义修饰器需要返回一个以修饰函数 func 为参数的 wapper 函数，那么可以想到 trace 里会返回 wapper，那么在这里，则是返回了&lt;code&gt;self.functools.update_wrapper(wrapper, func)&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)
更新一个 wrapper 函数以使其类似于 wrapped 函数。 可选参数为指明原函数的哪些属性要直接被赋值给 wrapper 函数的匹配属性的元组，并且这些 wrapper 函数的属性将使用原函数的对应属性来更新。
此函数的主要目的是在 decorator 函数中用来包装被装饰的函数并返回包装器。 如果包装器函数未被更新，则被返回函数的元数据将反映包装器定义而不是原始函数定义，这通常没有什么用处。
&lt;a href=&#34;https://docs.python.org/zh-cn/3/library/functools.html?highlight=functools#module-functools&#34;&gt;module-functools&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;trace 里仅仅是定义了&lt;code&gt;wapper()&lt;/code&gt;,而在&lt;code&gt;wapper()&lt;/code&gt;中执行了 func，然后返回了 func 的返回值，在这里修饰器得到了 func 的参数，(&lt;code&gt;q.__call__(self, *args)&lt;/code&gt;,这里被作为修饰器调用时，args[0] 是被修饰的函数，这个参数被传到了 trace 里)因此可以遍历参数并 print 它们的值，func 在wapper 中执行，这样也可以 print 返回值&lt;/p&gt;
&lt;p&gt;在处理error时会有些麻烦，因为 func 是在 q 的&lt;code&gt;wapper()&lt;/code&gt;中运行的，异常抛出时会抛到 wapper 的 栈帧，这里需要在 wapper 中获取 error 信息，这是通过 &lt;code&gt;self.sys.exc_info()&lt;/code&gt;来做到的，通过 print error_trace_back.tb_next 可以正确显示异常。&lt;/p&gt;
&lt;h3 id=&#34;reference&#34; &gt;reference
&lt;span&gt;
    &lt;a href=&#34;#reference&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zestyping/q&#34;&gt;https://github.com/zestyping/q&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pyvideo.org/video/1858/sunday-evening-lightning-talks#t=25m15s&#34;&gt;http://pyvideo.org/video/1858/sunday-evening-lightning-talks#t=25m15s&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Flask 源码阅读（1） : request的处理流程</title>
      <link>https://b1indsight.github.io/post/read_flask_source_code_1/</link>
      <pubDate>Sun, 02 Aug 2020 21:11:42 +0800</pubDate>
      
      <guid>https://b1indsight.github.io/post/read_flask_source_code_1/</guid>
      <description>&lt;h2 id=&#34;前言&#34; &gt;前言
&lt;span&gt;
    &lt;a href=&#34;#%e5%89%8d%e8%a8%80&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;本系列试图从flask 1.0版开始阅读一个完整的项目，不同于常见的追踪启动后行为来阅读源码的方式，这一个系列的文章打算从写一个符合wsgi方式的web框架开始，然后逐步完善添加功能的方式来写阅读笔记。&lt;/p&gt;
&lt;h2 id=&#34;wsgi规范&#34; &gt;wsgi规范
&lt;span&gt;
    &lt;a href=&#34;#wsgi%e8%a7%84%e8%8c%83&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;(environ, start_response):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start_response(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;, [(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;)])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello world!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一个简单的 wsgi 规范的 app 会被构建为以上的形式。其中app作为即将扩展的部分，需要被实现为一个 Callable 对象，它接受 environ 和 start_response 两个参数，并返回一个字节序列。&lt;/p&gt;
&lt;h2 id=&#34;flask-的app实现&#34; &gt;flask 的app实现
&lt;span&gt;
    &lt;a href=&#34;#flask-%e7%9a%84app%e5%ae%9e%e7%8e%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;以上提到 app 需要被实现为一个 callable 对象，那么，作为主体的 Flask 类则要定义 &lt;code&gt;__call__()&lt;/code&gt; 函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __call__(self, environ, start_response):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;wsgi_app(environ, start_response)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到&lt;code&gt;__call__&lt;/code&gt; 函数其实只是返回了&lt;code&gt;wsgi_app(environ, start_response)&lt;/code&gt;， 真正的app主体在 wsgi_app上，&lt;code&gt;__call__()&lt;/code&gt; 只是它的一个包装。通过这种方式可以分离 app 方法，便于对 app 进行修改。&lt;/p&gt;
&lt;p&gt;观察&lt;code&gt;wsgi_app()&lt;/code&gt; 方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wsgi_app&lt;/span&gt;(self, environ, start_response):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ctx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;request_context(environ)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        error &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ctx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;full_dispatch_request()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                error &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;handle_exception(e)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                error &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exc_info()[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; response(environ, start_response)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;should_ignore_error(error):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                error &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ctx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;auto_pop(error)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;方法主体十分简单，首先根据 environ 构造 context ， 然后通过 &lt;code&gt;full_dispatch_request()&lt;/code&gt; 解析请求返回函数
&lt;code&gt;response&lt;/code&gt; ，&lt;code&gt;response(environ, start_response)&lt;/code&gt; 函数返回真正需要获得的字节序列。&lt;/p&gt;
&lt;h3 id=&#34;request_context-函数&#34; &gt;&lt;code&gt;request_context()&lt;/code&gt; 函数
&lt;span&gt;
    &lt;a href=&#34;#request_context-%e5%87%bd%e6%95%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request_context&lt;/span&gt;(self, environ):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; RequestContext(self, environ)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;返回了 RequestContext 类， 暂且跳过。&lt;/p&gt;
&lt;h3 id=&#34;full_dispatch_request-函数&#34; &gt;&lt;code&gt;full_dispatch_request()&lt;/code&gt; 函数
&lt;span&gt;
    &lt;a href=&#34;#full_dispatch_request-%e5%87%bd%e6%95%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;full_dispatch_request&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;try_trigger_before_first_request_functions()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            request_started&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            rv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;preprocess_request()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; rv &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                rv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dispatch_request()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            rv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;handle_user_exception(e)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;finalize_request(rv)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如上所说，&lt;code&gt;full_dispatch_request()&lt;/code&gt; 函数作为主体主要执行了以下几件事&lt;/p&gt;
&lt;p&gt;&lt;code&gt;try_trigger_before_first_request_functions()&lt;/code&gt; : 这个函数并不复杂，简单来说是在第一个 request 之前初始化并依次执行&lt;code&gt;self.before_first_request_funcs&lt;/code&gt;中的函数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;request_started.send(self)&lt;/code&gt; : 这一部分&lt;code&gt;request_started&lt;/code&gt;作为&lt;code&gt;_FakeSingnal&lt;/code&gt;对象用来发送 request start的信号&lt;/p&gt;
&lt;p&gt;&lt;code&gt;preprocess_request()&lt;/code&gt; : 预处理请求，先由上下文栈弹出蓝图，调用&lt;code&gt;url_value_preprocessors.get(none， ())&lt;/code&gt;来获取针对所有 url 值需要的函数，如果有针对所有 url 都起作用的视图函数，则在此调用。接下来调用每一个使用&lt;code&gt;before_request&lt;/code&gt;装饰的可作用于所有 request 的函数。如果其中某一个函数返回一个值，这个值将会作为视图返回值 处理并停止进一步的请求处理。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dispatch_request()&lt;/code&gt; ：本函数进行url匹配，返回视图函数返回值。由栈顶弹出 request，然后&lt;code&gt;rule = req.url_rul&lt;/code&gt;，如果 rule 含有 provide_automatic_options，自动调用&lt;code&gt;self.make_default_options_response()&lt;/code&gt;函数并返回。否则返回&lt;code&gt;self.view_functions[rule.endpoint] (**req.view_args)&lt;/code&gt;，可以看出这里仅通过endpoint来匹配 view function 字典。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;finalize_request()&lt;/code&gt; : 这个函数将先调用&lt;code&gt;make_response(rv)&lt;/code&gt;视图返回值转变为真正的 response (这一部分之后再谈)。接下来是函数主要部分，&lt;code&gt;process_response(response)&lt;/code&gt;函数获取上下文，获得蓝图和上下文中 request 之后需要调用的函数，接下来构造执行链 ctx.after_request_functions-&amp;gt;（逆置）bp.after_request_functions-&amp;gt;适用于所有的 request 的 （逆置） after_request_functions。按照执行链依次执行，最终储存session，结束request。&lt;/p&gt;
&lt;h2 id=&#34;小结&#34; &gt;小结
&lt;span&gt;
    &lt;a href=&#34;#%e5%b0%8f%e7%bb%93&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;本文作为 flask 源码阅读的第一篇，简略的浏览了一遍 app 中关于 request 的处理流程，设计方式基本十分直观，主体分为三部分，在 request 之前，request 处理， request 之后构建了相关的执行链，并进行调用。 接下来一篇将试图观察视图函数的注册以及 route 部分的实现。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>从零开始的python解释器（1）</title>
      <link>https://b1indsight.github.io/post/from_zero_to_a_python_interpreter_1/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://b1indsight.github.io/post/from_zero_to_a_python_interpreter_1/</guid>
      <description>&lt;h2 id=&#34;单条字节码的解释运行&#34; &gt;单条字节码的解释运行
&lt;span&gt;
    &lt;a href=&#34;#%e5%8d%95%e6%9d%a1%e5%ad%97%e8%8a%82%e7%a0%81%e7%9a%84%e8%a7%a3%e9%87%8a%e8%bf%90%e8%a1%8c&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;反编译字节码&#34; &gt;反编译字节码
&lt;span&gt;
    &lt;a href=&#34;#%e5%8f%8d%e7%bc%96%e8%af%91%e5%ad%97%e8%8a%82%e7%a0%81&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;python 字节码形式可以用&lt;code&gt;dis.dis()&lt;/code&gt;来反编译code object来获得，先考虑一段简单的python代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;反编译之后是：
&lt;img src=&#34;https://firebasestorage.googleapis.com/v0/b/firescript-577a2.appspot.com/o/imgs%2Fapp%2Fb1indsight%2FQSbuQtX8Ay.png?alt=media&amp;amp;token=e2261049-5c88-4308-99ea-70f6fc57dd76&#34; alt=&#34;dis.dis(code)&#34;&gt;&lt;/p&gt;
&lt;p&gt;可见字节码拥有2Byte长度，前半部分用来标识字节码，后半是参数。其中字节码的参数仅用来标识字节码参数的位置，而不是参数本身。&lt;/p&gt;
&lt;h3 id=&#34;字节码来源&#34; &gt;字节码来源
&lt;span&gt;
    &lt;a href=&#34;#%e5%ad%97%e8%8a%82%e7%a0%81%e6%9d%a5%e6%ba%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;code object是由&lt;code&gt;compile()&lt;/code&gt;函数编译代码字符串生成的。在当前要进行的部分暂时关注它的一部分内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;co_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Z&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\x17\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Z&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;co_consts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;co_names &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上则是解释运行暂时需要的全部材料，其中co_code则是python字节码，co_consts用来存储需要的常数，co_names存储需要的变量。&lt;/p&gt;
&lt;p&gt;举例：LOAD_CONST的解释
&lt;code&gt;print(co_code[0])&lt;/code&gt;则会返回100，即是字节码， &lt;code&gt;co_code[1]= 0&lt;/code&gt;则是字节码参数
通过&lt;code&gt;dis.opname[100]&lt;/code&gt;则可知道字节码&lt;code&gt;opname = LOAD_CONST&lt;/code&gt;,参数则是&lt;code&gt;co_consts[0] = 1&lt;/code&gt;。这样第一条字节码就可以翻译为&lt;code&gt;LOAD_CONST(1)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;字节码执行&#34; &gt;字节码执行
&lt;span&gt;
    &lt;a href=&#34;#%e5%ad%97%e8%8a%82%e7%a0%81%e6%89%a7%e8%a1%8c&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;由上知道了字节码本身被翻译为&lt;code&gt;LOAD_CONST(1)&lt;/code&gt;，接下来就需要执行该函数
python vm与JVM相同，都是基于操作数栈的解释器，函数在执行后将返回值压入操作数栈
因此，&lt;code&gt;LOAD_CONST()&lt;/code&gt;函数可以被写成以下形式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LOAD_CONST&lt;/span&gt;(num):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push(num)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样，第一条字节码便执行完成&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;多条字节码顺序执行&#34; &gt;多条字节码顺序执行
&lt;span&gt;
    &lt;a href=&#34;#%e5%a4%9a%e6%9d%a1%e5%ad%97%e8%8a%82%e7%a0%81%e9%a1%ba%e5%ba%8f%e6%89%a7%e8%a1%8c&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;这样可以写出字节码解释器主体的循环：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        byteName, arguments &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prase_byte_code_and_argument()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dispatch(byteName, arguments)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; byteName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RETURE_VALUE&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此处，鉴于将来要对于循环和分支结构的支持，考虑通过判断&lt;code&gt;RETURE_VALUE&lt;/code&gt;来返回退出循环。&lt;/p&gt;
&lt;h3 id=&#34;prase_byte_code_and_argument函数&#34; &gt;&lt;code&gt;prase_byte_code_and_argument()&lt;/code&gt;函数
&lt;span&gt;
    &lt;a href=&#34;#prase_byte_code_and_argument%e5%87%bd%e6%95%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;本函数用来解析code.co_code的字节码，转换为字节码函数名和参数。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pythonpython&#34; data-lang=&#34;pythonpython&#34;&gt;def prase_byte_code_and_argument():
    byteCode = code.co_code[pc]
    byteName = dis.opname[byteCode]
    arguments = []
    pc += 2

    if byteCode &amp;gt;= dis.HAVE_ARGUMENT:
        arg = code.co_code[pc-1]

        if byteCode in dis.hasconst:   # Look up a constant
            arg = code.co_consts[arg]
        elif byteCode in dis.hasname:  # Look up a name
            arg = code.co_names[arg]
        elif byteCode in dis.haslocal:  # Look up a local name
            arg = code.co_varnames[arg]
        elif byteCode in dis.hasjrel:  # Calculate a relative jump
            arg = pc + arg
        else:
            arg = arg
        arguments = [arg]
    else:
        arguments = []

return byteName, arguments
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;dispatchbytename-arguments函数&#34; &gt;&lt;code&gt;dispatch(byteName, arguments)&lt;/code&gt;函数
&lt;span&gt;
    &lt;a href=&#34;#dispatchbytename-arguments%e5%87%bd%e6%95%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;获取到&lt;code&gt;byteName&lt;/code&gt;之后要得到对应的函数对象，此时使用&lt;code&gt;getattr(byteName)&lt;/code&gt;来获取对应的函数对象
然后调用&lt;code&gt;byteName(*arguments)&lt;/code&gt;完成执行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dispatch&lt;/span&gt;(byteName, arguments):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    func &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getattr(vm, byteName)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    func(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;arguments)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reture_value&#34; &gt;RETURE_VALUE
&lt;span&gt;
    &lt;a href=&#34;#reture_value&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;return value暂时仅作为字节码的终止，因此判断运行到此处时退出主循环。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;总结&#34; &gt;总结
&lt;span&gt;
    &lt;a href=&#34;#%e6%80%bb%e7%bb%93&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;最简单的字节码求值器的主题就这样写成了，剩余的其他工作即是填充上未写过的字节码函数定义，这样字节码的解释求值即可以完成了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JUC包AQS设计</title>
      <link>https://b1indsight.github.io/post/juc_aqs/</link>
      <pubDate>Fri, 01 May 2020 16:27:50 +0800</pubDate>
      
      <guid>https://b1indsight.github.io/post/juc_aqs/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;为什么需要AQS
&lt;ul&gt;
&lt;li&gt;JUC包中提供了一系列的同步器，这些同步器都有以下基本功能
&lt;ul&gt;
&lt;li&gt;内部同步状态的管理&lt;/li&gt;
&lt;li&gt;内部同步状态的设置
&lt;ul&gt;
&lt;li&gt;使一个线程被阻塞&lt;/li&gt;
&lt;li&gt;使线程被其他线程唤醒&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;几乎任何一个同步器都可以用来设计其他的同步器，因此将共有部分抽象并设计框架成为一个符合直觉的需求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AQS设计需求
&lt;ul&gt;
&lt;li&gt;功能目标
&lt;ul&gt;
&lt;li&gt;基本方法，Acquire和Release&lt;/li&gt;
&lt;li&gt;阻塞和非阻塞操作&lt;/li&gt;
&lt;li&gt;可选的超时设置&lt;/li&gt;
&lt;li&gt;通过中断实现的任务取消，通常是分为两个版本，一个 acquire 可取消，而另一个不可以&lt;/li&gt;
&lt;li&gt;独占与非独占模式&lt;/li&gt;
&lt;li&gt;监控形式的await/signal 操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能目标
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://firebasestorage.googleapis.com/v0/b/firescript-577a2.appspot.com/o/imgs%2Fapp%2Fb1indsight%2FGClYdJQyqH?alt=media&amp;amp;token=94fddedf-4b05-4a05-8509-14aa630410f4&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AQS结构
&lt;ul&gt;
&lt;li&gt;acquire和release
&lt;ul&gt;
&lt;li&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-acquire:&#34; data-lang=&#34;acquire:&#34;&gt;  while (synchronization state does not allow acquire) {
      enqueue current thread if not already queued;
      possibly block current thread;
  }
  dequeue current thread if it was queued;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-release:&#34; data-lang=&#34;release:&#34;&gt;  update synchronization state;
  if (state may permit a blocked thread to acquire)
      unblock one or more queued threads;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同步状态的原子性管理
&lt;ul&gt;
&lt;li&gt;AQS使用了一个32位int保存state，并提供&lt;code&gt;getState&lt;/code&gt;, &lt;code&gt;setState&lt;/code&gt;, 和&lt;code&gt;compareAndSet&lt;/code&gt;来读取和操作&lt;/li&gt;
&lt;li&gt;在CyclingBarrier中使用了64位state， 因此利用了锁来完成原子性操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线程的阻塞与解除阻塞
&lt;ul&gt;
&lt;li&gt;通过JUCLockSupport park和unpark来控制阻塞和feizuse&lt;/li&gt;
&lt;li&gt;park是基于线程设置的，而不是基于同步器&lt;/li&gt;
&lt;li&gt;unpark是没有计数的，因此可能有多余的unpark附在线程上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;队列的管理
&lt;ul&gt;
&lt;li&gt;阻塞队列采用严格的FIFO链表队列，使用了变体的CLH锁。
&lt;ul&gt;
&lt;li&gt;为解决取消和超时功能，待选MCS锁变体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://firebasestorage.googleapis.com/v0/b/firescript-577a2.appspot.com/o/imgs%2Fapp%2Fb1indsight%2FJyxNDXHojl?alt=media&amp;amp;token=735980c0-8bc6-4c36-8d67-ecfd7992de20&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;节点通过自旋和CAS操作插入，每个节点状态被保存在它的前驱，因此自旋阻塞类似&lt;code&gt;while(node.pred.state != release);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;CLH锁的优点在于节点的入队与出队总是快速， 无障碍且无锁的，而且由于每个节点的状态保持在前驱，使得修改节点可以分散进行；&lt;/li&gt;
&lt;li&gt;一个节点的前驱修改其状态，他的后继在下一次自旋时即会发现状态的改变，在阻塞队列中，则需要前驱节点去显式的唤醒（即unpark。
&lt;ul&gt;
&lt;li&gt;其中节点的next的仅为一种优化，这个队列是由prev所链接的，由于缺少应用于双向列表的CAS操作，next仅仅是直接赋值的。因此在唤醒时使用next来找到需要唤醒的节点，next不存在也并不能证明后继不存在，需要由tail前溯来确认。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;节点在前驱中的状态是用于控制阻塞而不是自旋，在同步器中，线程仅在&lt;code&gt;tryAcquire&lt;/code&gt;返回&lt;code&gt;true&lt;/code&gt;时才在&lt;code&gt;acquire&lt;/code&gt;返回。&lt;/li&gt;
&lt;li&gt;活动线程在队首时，仅允许&lt;code&gt;tryAcquire&lt;/code&gt;来获取锁，也可能&lt;code&gt;Acquire&lt;/code&gt;失败而重新堵塞，此时是通过检查前驱是否为head来确认解除许可。取消状态也必须在状态位实现，因此单bit的release位并不够。&lt;/li&gt;
&lt;li&gt;设置状态同时可以避免多余的park和unpark，在线程park前，设置signal位并检查同步状态和节点状态。线程release时重置状态，这样显性的标识状态可以避免多次阻塞及引入多次冲突的开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Acquire操作
&lt;ul&gt;
&lt;li&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  if (!tryAcquire(arg)) {
      node = create and enqueue new node;
      pred = node&amp;#39;s effective predecessor;
  while (pred is not head node || !tryAcquire(arg)) {
      if (pred&amp;#39;s signal bit is set)
          park();
      else
          compareAndSet pred&amp;#39;s signal bit to true;
      pred = node&amp;#39;s effective predecessor;
  }
  head = node;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;release
&lt;ul&gt;
&lt;li&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  if (tryRelease(arg) &amp;amp;&amp;amp; head node&amp;#39;s signal bit is set) {
      compareAndSet head&amp;#39;s signal bit to false;
      unpark head&amp;#39;s successor, if one exists
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;条件队列
&lt;ul&gt;
&lt;li&gt;#TODO&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AQS使用
&lt;ul&gt;
&lt;li&gt;AQS作为模板提供给子类，子类仅需要设置更新状态。在JUC包中的同步器使用了一个内部类来包装AQS，重写了tryAquire和tryRelease来控制同步。&lt;/li&gt;
&lt;li&gt;AQS提供了多个版本的Aquire和Release，包括超时和中断版本。并提供了tryAcquireShared来控制可重入的资源，方法通过返回值通知框架所剩资源状况，在release时框架通过级联来唤醒多个节点。&lt;/li&gt;
&lt;li&gt;公平与非公平功能：
&lt;ul&gt;
&lt;li&gt;在一些条件下，非公平的获取锁可以有效提高同步器吞吐量，而如果外来线程可以持续抢占锁则会造成队列中线程饥饿。&lt;/li&gt;
&lt;li&gt;FIFO队列在进入之前线程会调用tryAcquire方法，因此获得了一个与队头线程竞争的机会，从而可以实现公平与非公平的竞争，此时可以修改tryAcquire中对资源的请求次数来使其偏向外来线程；如果要实现严格的公平竞争，则可以通过添加约束，使线程只有入队才能调用tryAcquire。
&lt;ul&gt;
&lt;li&gt;一个比完全公平竞争优化的方法：在lock队列为空时，线程可以使用tryAcquire来获取锁，这样有一个线程可以不必入队获取到锁，得到性能的一点优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reference
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gee.cs.oswego.edu/dl/papers/aqs.pdf&#34;&gt;http://gee.cs.oswego.edu/dl/papers/aqs.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.inoreader.com/article/3a9c6e78f01cc939-juc-aqs&#34;&gt;https://www.inoreader.com/article/3a9c6e78f01cc939-juc-aqs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>斯科特杨的高效率方法</title>
      <link>https://b1indsight.github.io/post/effecient_method_of_scotty/</link>
      <pubDate>Sun, 05 May 2019 16:27:50 +0800</pubDate>
      
      <guid>https://b1indsight.github.io/post/effecient_method_of_scotty/</guid>
      <description>&lt;p&gt;在阅读了Scoltt Yang的几本关于高效率的书之后，总结并试着运用了一些关于高效率的方法，在这里做一些总结。&lt;/p&gt;
&lt;h3 id=&#34;日周目标清单&#34; &gt;日/周目标清单
&lt;span&gt;
    &lt;a href=&#34;#%e6%97%a5%e5%91%a8%e7%9b%ae%e6%a0%87%e6%b8%85%e5%8d%95&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;建立一个周目标清单，并在每天开始的时候将清单中的一些任务添加到日目标清单中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每天日目标清单中的主要工作应该不超过3个，可以让你分配主要的精力在这些任务上面。（这条原则来自于《精力管理》）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在做完清单中的所有项之后立刻开始休息，即使你仅使用了3个小时就完成了今天的任务，也要避免继续添加今天的任务，正如我们在小时候会有即使做完作业也会被父母继续添加任务这样的经历，我们应当避免把日目标清单变成普通的todo-list，从而减少每天完成任务的动力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每周工作六天，在每周的最后一天不要设置任何需要大量精力的任务，为自己思考休息提供充足的空闲，给自己干涸的电池充满电。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;精力管理&#34; &gt;精力管理
&lt;span&gt;
    &lt;a href=&#34;#%e7%b2%be%e5%8a%9b%e7%ae%a1%e7%90%86&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;我们在工作时应当管理的是我们的精力和任务，而非时间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安排你的食物，少食多餐，每天吃4-6餐。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;工作90-120分钟休息一次，注意力是消耗品，同时也需要锻炼。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将每天固定要做的事建立为习惯，让这些事自动完成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;做自己想要去做的事，而不是应该去做的事。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;建立习惯&#34; &gt;建立习惯
&lt;span&gt;
    &lt;a href=&#34;#%e5%bb%ba%e7%ab%8b%e4%b9%a0%e6%83%af&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;30天建立一个习惯，并将它写在纸上或者以文档记录下来，在最初的30天之内，一旦在某一天停止就重新开始计数，重新坚持30天。
之后便可以不必坚持的如此严格，身体会自动将它完成。&lt;/p&gt;
&lt;p&gt;选择要建立的习惯时推荐阅读《Zen to do》&lt;/p&gt;
&lt;h3 id=&#34;批处理&#34; &gt;批处理
&lt;span&gt;
    &lt;a href=&#34;#%e6%89%b9%e5%a4%84%e7%90%86&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;生活中有大量的事情可以使用批处理来解决，把大量原本填充到其他空余时间的事情集中解决，从而可以节省出大量额外的时间。&lt;/p&gt;
&lt;p&gt;以下几类事情可以使用批处理的办法来解决：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阅读
集中阅读订阅的博客或者文章，每日学习工作中的阅读任务也可以批处理来解决。&lt;/li&gt;
&lt;li&gt;邮件处理/拨打电话/社会联系&lt;/li&gt;
&lt;li&gt;作业/写博客/电脑工作
一次性做这些工作可能会花费大量的时间，但是可以避免每天进入专注时花费的时间，也不必使自己承受拖延的痛苦。&lt;/li&gt;
&lt;li&gt;清扫/购物
将家务之类的事务在每周的某一天集中完成，可以避免陷入无尽的家务漩涡。&lt;/li&gt;
&lt;li&gt;思考/设置目标
在周日把自己的项目或者一些任务放入自己的周清单，使用完整的一块时间来进行计划，远比使用小段时间计划要好。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://b1indsight.github.io/about/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://b1indsight.github.io/about/</guid>
      <description>&lt;p&gt;我是b1indsight， &lt;a href=&#34;https://twitter.com/b1indsight1&#34;&gt;这是我的twitter&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;about还没写，我好懒&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
